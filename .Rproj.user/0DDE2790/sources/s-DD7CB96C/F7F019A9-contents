
## ***************************************************************************
## Shiny APP economía - Unidad de Métodos y Acceso a Datos
## ***************************************************************************

##  0. DATA Y PAQUETES  ======================================================

library(DT)
library(shinythemes)
library(here)
library(plotly)
library(shinyWidgets)
library(stringr)
library(scales)
library(viridis)
library(ggrepel)
library(tidyverse)
library(shinycssloaders)

source("utils.R")

theme_set(theme_bdd(base_size = 12))
update_geom_defaults("text", list(family = theme_get()$text$family))

dir.create('~/.fonts')
file.copy("www/Titillium Web.ttf", "~/.fonts")
system('fc-cache -f ~/.fonts')

# Spinner options 
options(spinner.color = "#21618C",
        spinner.color.background="#ffffff", 
        spinner.size = 2)

##  1. PREPARAR DATA  ========================================================
load("data/data_eco.rda")

data_eco <- data_eco %>% 
  mutate(fecha_num = as.numeric(lubridate::year(fecha)))

# * 1.1. Data CP competitividad ----

# Lista con variables estáticas (barras, anual)
list_barras_CP_comp <- c(
  "Exportaciones anuales según país de destino (USD corrientes) según Uruguay XXI",
  "Empresas exportadoras (USD corrientes) según Uruguay XXI",
  "Exportaciones anuales por capítulo (USD corrientes) según Uruguay XXI",
  "Exportaciones de servicios (millones USD corrientes)"
  )

# Lista con variables estáticas (barras, mensual)
list_barras_CP_comp_men <- c(
  "Importaciones mensuales según clasificación NCM CIF (miles USD corrientes) según BCU",
  "Importaciones mensuales según origen CIF (USD corrientes) según BCU"
  )

lista_simple_mensual <- c(
  "Importaciones mensuales de petróleo crudo CIF (miles USD) según BCU",
  "Importaciones mensuales de bienes CIF (millones USD corrientes) según BCU",
  "Exportaciones mensuales de bienes cumplidas FOB (miles USD corrientes) según BCU",
  "Exportaciones mensuales productos no tradicionales FOB (miles USD corrientes) según BCU",
  "Exportaciones mensuales productos tradicionales FOB (miles USD corrientes) según BCU")

list_barras_CP_comp_anual <- c(
  "Importaciones anuales de bienes y servicios CIF (millones USD corrientes), 6ª  edición manual BP, según BCU",
  "Importaciones anuales de bienes y servicios CIF (millones USD corrientes), 5ª  edición manual BP, según BCU")

# Data
d_CP_comp <- data_eco %>%
  filter(str_detect(P2, "Competitividad")) %>% 
  janitor::remove_empty(which = "cols") %>% 
  mutate(anio = ifelse(NOMINDICADOR %in% list_barras_CP_comp, 
                       lubridate::year(fecha), NA)) %>% 
  mutate(mes_anio = ifelse(NOMINDICADOR %in% list_barras_CP_comp_men, 
                           format(fecha, format = "%b-%Y"), NA)) %>%
  mutate(categoria = case_when(
    !is.na(PAIS) ~ PAIS,
    !is.na(EMPRESA) ~ EMPRESA,
    !is.na(`FLUJO DE IMPORTACION`) ~ `FLUJO DE IMPORTACION`,
    !is.na(CAPITULO) ~ CAPITULO,
    !is.na(`TIPO DE SERVICIOS`) ~ `TIPO DE SERVICIOS`)) %>% 
  drop_na(fecha, VALOR)

# Mes_anio como factor ordenado por fecha y no numérico
lev_mes_anio <- d_CP_comp %>% 
  filter(NOMINDICADOR %in% list_barras_CP_comp_men) %>% 
  arrange(fecha) %>% 
  distinct(mes_anio) %>%  
  pull()

d_CP_comp <- d_CP_comp %>% 
  mutate(mes_anio = factor(mes_anio, levels = lev_mes_anio))

# Lista indicadores simples
lista_simple_CP_comp <- d_CP_comp %>% 
  filter(NOMINDICADOR %notin% list_barras_CP_comp) %>% 
  filter(NOMINDICADOR %notin% list_barras_CP_comp_men) %>% 
  filter(NOMINDICADOR %notin% lista_simple_mensual) %>% 
  distinct(NOMINDICADOR) %>% 
  pull()

# * 1.2. Data CP precios ----
d_CP_precios <- data_eco %>%
  filter(str_detect(P2, "Precios")) %>% 
  janitor::remove_empty(which = "cols") %>% 
  drop_na(fecha, VALOR) 


# * 1.3. Data CDE Crecimiento ----
lista_pordepto <- c(
  "Participación departamental en la actividad económica (% actividad económica nacional) según OPP",
  "Valor agregado bruto departamental (% VAB nacional) según diversas fuentes nacionales"
  )

d_CDE_crec <- data_eco %>%
  filter(str_detect(P2, "Crecimiento")) %>% 
  janitor::remove_empty(which = "cols") %>% 
  mutate(anio = ifelse(NOMINDICADOR %in% lista_pordepto,
                       lubridate::year(fecha), NA)) %>% 
  # rename(filtro = `SECTOR PRODUCTIVO`) %>% 
  drop_na(fecha, VALOR) 

lista_CDE_crec_simple <- d_CDE_crec %>% 
  filter(NOMINDICADOR %notin% lista_pordepto) %>% 
  distinct(NOMINDICADOR) %>% 
  pull()
  

# * 1.4. Data CDE Productividad ----
d_CDE_prod <- data_eco %>%
  filter(str_detect(P2, "Productividad")) %>% 
  janitor::remove_empty(which = "cols") %>% 
  drop_na(fecha, VALOR) 


# * 1.5. Data CDE Estructura productiva ----
list_CDE_estr <- c(
  "Exportaciones anuales por capítulo (USD corrientes) según Uruguay XXI",
  "Exportaciones de servicios (millones USD corrientes)")

lista_CDE_estr_barras <- c("Exportaciones de servicios (millones USD corrientes)",
                           "Exportaciones anuales por capítulo (USD corrientes) según Uruguay XXI")

d_CDE_estr <- data_eco %>%
  filter(str_detect(P2, "Estructura productiva")) %>% 
  mutate(JERARQUIA = case_when(
    NOMINDICADOR == "Valor agregado bruto sectorial (% PIB) según WDI" ~ 1,
    TRUE ~ as.numeric(JERARQUIA)
  )) %>% 
  rename(sector = `SECTOR PRODUCTIVO`) %>% 
  janitor::remove_empty(which = "cols") %>% 
  mutate(anio = ifelse(NOMINDICADOR %in% list_CDE_estr,
                       lubridate::year(fecha), NA))  %>% 
  drop_na(fecha, VALOR) %>% 
  mutate(categoria = case_when(!is.na(`TIPO DE SERVICIOS`) ~ `TIPO DE SERVICIOS`,
                               !is.na(`CAPITULO`) ~ `CAPITULO`)) 

list_CDE_estr_2 <- d_CDE_estr %>% 
  filter(NOMINDICADOR %notin% list_CDE_estr) %>% 
  distinct(NOMINDICADOR) %>% 
  pull()

prueba <- d_CDE_estr %>% 
  filter(NOMINDICADOR %notin% list_CDE_estr) %>% 
  select(NOMINDICADOR, VALOR, JERARQUIA, sector)
  
# # * 1.6. Data CDE Desarrollo Economico ----
# d_CDE_de <- data_eco %>%
#   filter(str_detect(P2, "Desarrollo económico")) %>% 
#   rename(sector = `SECTOR PRODUCTIVO`) %>% 
#   janitor::remove_empty(which = "cols") %>% 
#   drop_na(fecha, VALOR) 
# 

# * 1.7. Data CDE Inversion ----
# Lista de variables con filtros constantes
filtros_const <- c(
  "Formación bruta de capital (% del crecimiento anual) según WDI",
  "Formación bruta de capital (USD a precios actuales) según WDI",
  "Formación bruta de capital (USD constantes de 2010) según WDI",
  "Formación bruta de capital fijo (% del crecimiento anual) según WDI",
  "Formación bruta de capital fijo (% PIB)",
  "Formación bruta de capital fijo (USD a precios actuales) según WDI",
  "Formación bruta de capital fijo (USD constantes de 2010) según WDI"
  )

d_CDE_inv <- data_eco %>%
  filter(str_detect(P2, "Inversión")) %>% 
  rename(sec_inst = `SECTOR INSTITUCIONAL`,
         comp_inv = `COMPONENTE DE LA INVERSION`,
         sec_rec = `SECTOR RECEPTOR DE IED`,
         comp_ied = `COMPONENTE DE IED`) %>% 
  janitor::remove_empty(which = "cols") %>% 
  drop_na(fecha, VALOR) %>% 
  mutate(sec_inst = case_when(NOMINDICADOR %in% filtros_const ~ NA_character_,
                              TRUE ~ sec_inst)) %>% 
  arrange(NOMINDICADOR) %>% 
  mutate(filtro = case_when(
    !is.na(comp_inv) ~ comp_inv,
    !is.na(comp_ied) ~ comp_ied,
  )) %>% 
  mutate(JERARQUIA = as.numeric(JERARQUIA))

lista_simple <- d_CDE_inv %>% 
  filter(is.na(sec_inst) & is.na(sec_rec)) %>% 
  select(NOMINDICADOR) %>% 
  distinct() %>% 
  pull()

lista_inst <- d_CDE_inv %>% 
  filter(!is.na(sec_inst)) %>% 
  select(NOMINDICADOR) %>% 
  distinct() %>% 
  pull()

lista_rec <- d_CDE_inv %>% 
  filter(!is.na(sec_rec)) %>% 
  select(NOMINDICADOR) %>% 
  distinct() %>% 
  pull()

table(d_CDE_inv$comp_ied)

# * 1.8. Data CDE Educacion / Capital Humano ----
d_CDE_cti <- data_eco %>%
  filter(str_detect(P2, "CTI|Capital humano")) %>% 
  rename(nivel_edu = `NIVEL EDUCATIVO`) %>% 
  janitor::remove_empty(which = "cols") %>% 
  drop_na(fecha, VALOR) %>% 
  mutate(filtro = nivel_edu)

d_CDE_cti_jer <- d_CDE_cti %>% 
  filter(!is.na(JERARQUIA)) %>% 
  mutate(JERARQUIA = as.numeric(JERARQUIA)) %>% 
  group_by(NOMINDICADOR) %>% 
  summarise(jer = mean(JERARQUIA, na.rm = TRUE))


# * 1.9. Data AMB Ambiente ----
d_AMB_amb <- data_eco %>%
  filter(str_detect(P1, "Ambiente")) %>% 
  janitor::remove_empty(which = "cols") %>% 
  drop_na(fecha, VALOR) 


# * 1.10 Data SP Deuda ----
d_SP_deuda <- data_eco %>%
  filter(str_detect(P2, "Deuda")) %>% 
  rename(tipo_deuda = `TIPO DE DEUDA`,
         plazo_con = `PLAZO CONTRACTUAL`,
         sec_inst = `SECTOR INSTITUCIONAL`) %>% 
  mutate(filtro = case_when(
    !is.na(tipo_deuda) ~ tipo_deuda,
    !is.na(plazo_con) ~ plazo_con,
    !is.na(sec_inst) ~ sec_inst,
    !is.na(DEUDOR) ~ DEUDOR,
    TRUE ~ NA_character_
  )) %>% 
  mutate(nom_filtro = case_when(
    !is.na(tipo_deuda) ~ "Tipo de deuda",
    !is.na(plazo_con) ~ "Plazo contractual",
    !is.na(sec_inst) ~ "Sector institucional",
    !is.na(DEUDOR) ~ "Deudor",
    TRUE ~ NA_character_
  )) %>% 
  janitor::remove_empty(which = "cols") %>% 
  drop_na(fecha, VALOR) %>% 
  mutate(JERARQUIA = as.numeric(JERARQUIA))

d_SP_deuda_jer <- d_SP_deuda %>% 
  filter(!is.na(JERARQUIA)) %>% 
  mutate(JERARQUIA = as.numeric(JERARQUIA)) %>% 
  group_by(NOMINDICADOR) %>% 
  summarise(jer = mean(JERARQUIA, na.rm = TRUE))

lista_deuda <- d_SP_deuda %>% 
  filter(!is.na(filtro)) %>% 
  select(NOMINDICADOR) %>% 
  distinct() %>% 
  pull()

# 

# * 1.11. Data SP Empleo ----
d_SP_empleo <- data_eco %>%
  filter(str_detect(P2, "Empleo")) %>% 
  janitor::remove_empty(which = "cols") %>% 
  drop_na(fecha, VALOR) %>% 
  mutate(filtro = `SECTOR PRODUCTIVO`)

lista_empleo <- d_SP_empleo %>% 
  filter(!is.na(`SECTOR PRODUCTIVO`)) %>% 
  select(NOMINDICADOR) %>% 
  distinct() %>% 
  pull()

d_SP_empleo_jer <- d_SP_empleo %>% 
  filter(!is.na(JERARQUIA)) %>% 
  mutate(JERARQUIA = as.numeric(JERARQUIA)) %>% 
  group_by(NOMINDICADOR) %>% 
  summarise(jer = mean(JERARQUIA, na.rm = TRUE))


# * 1.12. Data SP Gasto ----
d_SP_gasto <- data_eco %>%
  filter(str_detect(P2, "Gasto")) %>% 
  rename(fun_gasto = `FUNCION DEL GASTO`) %>%
  mutate(fun_gasto = case_when(
    NOMINDICADOR == "Gasto público social per cápita (USD constantes de 2010) según CEPALSTAT" ~ NA_character_,
    TRUE ~ fun_gasto)) %>% 
  mutate(filtro = fun_gasto) %>% 
  janitor::remove_empty(which = "cols") %>% 
  drop_na(fecha, VALOR) 

lista_gasto <- d_SP_gasto %>% 
  filter(!is.na(fun_gasto)) %>% 
  select(NOMINDICADOR) %>% 
  distinct() %>% 
  pull()

d_SP_gasto_jer <- d_SP_gasto %>% 
  filter(!is.na(JERARQUIA)) %>% 
  mutate(JERARQUIA = as.numeric(JERARQUIA)) %>% 
  group_by(NOMINDICADOR) %>% 
  summarise(jer = mean(JERARQUIA, na.rm = TRUE))


# * 1.13. Data SP Educación ----
d_SP_edu <- data_eco %>%
  filter(str_detect(P2, "Educación")) %>% 
  rename(nivel_edu = `NIVEL EDUCATIVO`) %>% 
  janitor::remove_empty(which = "cols") %>% 
  drop_na(fecha, VALOR) %>% 
  mutate(filtro = nivel_edu)

lista_edu <- d_SP_edu %>% 
  filter(!is.na(nivel_edu)) %>% 
  select(NOMINDICADOR) %>% 
  distinct() %>% 
  pull()

d_SP_edu_jer <- d_SP_edu %>% 
  filter(!is.na(JERARQUIA)) %>% 
  mutate(JERARQUIA = as.numeric(JERARQUIA)) %>% 
  group_by(NOMINDICADOR) %>% 
  summarise(jer = mean(JERARQUIA, na.rm = TRUE))



##  2. USER INTERFACE  =======================================================

ui <- navbarPage(
  title = "Datos Económicos",
  theme = shinytheme("flatly"),
  collapsible = TRUE,
  fluid = TRUE,

  tabPanel(
    title = "Competitividad y precios", icon = icon("dollar-sign"),

    # * 2.1. Competitividad ----
    
    tabsetPanel(
      type = "pills",
      id   = "CP",
      
      tabPanel(
        "Competitividad", 
        br(),
        
        sidebarPanel(width = 3,
                     # style = "position:fixed;width:22%;",
                     
                     selectInput(
                        inputId = "indicador_CP_comp",
                        label = "Indicador",
                        choices = sort(unique(d_CP_comp$NOMINDICADOR)),
                        selected = 2019
                      ),
                      
                    uiOutput("selector_CP_comp"),
                    
                    br(),
                    
                     uiOutput("selector_CP_comp_2"),
                     
                     tags$a(href="https://umad.cienciassociales.edu.uy/", 
                             "Unidad de Métodos y Acceso a Datos",
                             style = "font-size:12px; color:Navy;
                             text-decoration:underline;"),
                     br(),
                     br(),
                     img(src = "logo_umad.png", height="70%",
                         width = "70%", align = "left"),
                    style = "display:inline-block;",
                    
        ),
        
        mainPanel(
          tags$h3(style="display:inline-block",
                  uiOutput("title_CP_comp")),
          div(style="display:inline-block", 
              dropdown(
                style = "minimal",
                status = "primary",
                width = "500px",
                right = TRUE,
                icon = icon("calculator", lib = "font-awesome"),
                uiOutput("info_CP_comp"))
          ),
          div(style="display:inline-block", 
              dropdown(
                style = "minimal",
                status = "primary",
                width = "500px",
                right = TRUE,
                icon = icon("exclamation", lib = "font-awesome"),
                uiOutput("rel_CP_comp"))
          ),
          div(style="display:inline-block", 
              dropdown(
                style = "minimal",
                status = "primary",
                width = "500px",
                right = TRUE,
                icon = icon("clock", lib = "font-awesome"),
                uiOutput("actualizacion_CP_comp"))
          ),
          tags$h5(uiOutput("subtitle_CP_comp")),
          br(),
          withSpinner(plotOutput("p_CP_comp", height = "500px"),type = 2),
          downloadButton(outputId = "baja_p_CP_comp", 
                         label = "Descarga el gráfico"),
          br(),
          br(),
          withSpinner(uiOutput("p_CP_comp_t5", width = "100%", height = "800px"),
                      type = 2),
          conditionalPanel(
            condition = paste0(paste0("[",toString(paste0("'",c(list_barras_CP_comp, list_barras_CP_comp_men, list_barras_CP_comp_anual),"'")),"]"),".includes(input.indicador_CP_comp)"),
            downloadButton(outputId = "baja_p_CP_comp_t5", 
                           label = "Descarga el gráfico")),
          br(),
          br(),
          DTOutput("tab_CP_comp"),
          br(),
          downloadButton("dl_tabla_CP_comp", "Descarga la tabla"), 
          br(),
          br()
        )
        
      ),
      
      tabPanel(
        "Precios",
        br(),
        sidebarPanel(
          width = 3,
          # style = "position:fixed;width:22%;",
          
          # * 2.2. Precios ----
          
          selectInput(
            inputId = "indicador_CP_precios",
            label = "Indicador",
            choices = sort(unique(d_CP_precios$NOMINDICADOR)),
            selected = 2019
          ),
          
          uiOutput("selector_CP_precios"),
          
          br(),
          
          tags$a(href="https://umad.cienciassociales.edu.uy/", 
                 "Unidad de Métodos y Acceso a Datos",
                 style = "font-size:12px; color:Navy;
                             text-decoration:underline;"),
          br(),
          br(),
          img(src = "logo_umad.png", height="70%",
              width = "70%", align = "left"),
          style = "display:inline-block;",
        ),
        
        mainPanel(
          tags$h3(style="display:inline-block",
                  uiOutput("title_CP_precios")),
          div(style="display:inline-block", 
              dropdown(
                style = "minimal",
                status = "primary",
                width = "500px",
                right = TRUE,
                icon = icon("calculator", lib = "font-awesome"),
                uiOutput("info_CP_precios"))
          ),
          div(style="display:inline-block", 
              dropdown(
                style = "minimal",
                status = "primary",
                width = "500px",
                right = TRUE,
                icon = icon("exclamation", lib = "font-awesome"),
                uiOutput("rel_CP_precios"))
          ),
          div(style="display:inline-block", 
              dropdown(
                style = "minimal",
                status = "primary",
                width = "500px",
                right = TRUE,
                icon = icon("clock", lib = "font-awesome"),
                uiOutput("actualizacion_CP_precios"))
          ),
          tags$h5(uiOutput("subtitle_CP_precios")),
          br(),
          withSpinner(plotOutput("p_CP_precios", height = "500px" ),
                      type = 2),
          br(),
          downloadButton(outputId = "baja_p_CP_precios",
                         label = "Descarga el gráfico"),
          br(),
          br(),
          DTOutput("tab_CP_precios"),
          br(),
          downloadButton("dl_tabla_CP_precios", "Descarga la tabla"), 
          br(),
          br()
        )
        
      )
    )
  ),
  tabPanel(
    title = "Desarrollo económico", icon = icon("signal"),
    
    tabsetPanel(
      type = "pills",
      id   = "CDE",
      
      # * 2.3. Crecimiento ----
      
      tabPanel(
        "Crecimiento",
        br(),
        sidebarPanel(
          width = 3,
          # style = "position:fixed;width:22%;",
          
          selectInput(
            inputId = "indicador_CDE_crec",
            label = "Indicador",
            choices = sort(unique(d_CDE_crec$NOMINDICADOR)),
            selected = 2019
          ),
          
          uiOutput("selector_CDE_crec"),
          
          br(),
          
          tags$a(href="https://umad.cienciassociales.edu.uy/", 
                 "Unidad de Métodos y Acceso a Datos",
                 style = "font-size:12px; color:Navy;
                             text-decoration:underline;"),
          br(),
          br(),
          img(src = "logo_umad.png", height="70%",
              width = "70%", align = "left"),
          style = "display:inline-block;",
        ),
        mainPanel(
          tags$h3(style="display:inline-block",
                  uiOutput("title_CDE_crec")),
          div(style="display:inline-block", 
              dropdown(
                style = "minimal",
                status = "primary",
                width = "500px",
                right = TRUE,
                icon = icon("calculator", lib = "font-awesome"),
                uiOutput("info_CDE_crec"))
          ),
          div(style="display:inline-block", 
              dropdown(
                style = "minimal",
                status = "primary",
                width = "500px",
                right = TRUE,
                icon = icon("exclamation", lib = "font-awesome"),
                uiOutput("rel_CDE_crec"))
          ),
          div(style="display:inline-block", 
              dropdown(
                style = "minimal",
                status = "primary",
                width = "500px",
                right = TRUE,
                icon = icon("clock", lib = "font-awesome"),
                uiOutput("actualizacion_CDE_crec"))
          ),
          tags$h5(uiOutput("subtitle_CDE_crec")),
          br(),
          withSpinner(plotOutput("p_CDE_crec", height = "500px" ), type = 2),
          br(),
          downloadButton(outputId = "baja_p_CDE_crec", 
                         label = "Descarga el gráfico"),
          br(),
          br(),
          withSpinner(uiOutput("p_CDE_crec_t5", width = "100%", height = "800px"),
                      type = 2),
          conditionalPanel(
            condition = paste0(paste0("[",toString(paste0("'",lista_pordepto,"'")),"]"),".includes(input.indicador_CDE_crec)"),
            downloadButton(outputId = "baja_p_CDE_crec_t5", 
                           label = "Descarga el gráfico")),
          br(),
          br(),
          DTOutput("tab_CDE_crec"),
          br(),
          downloadButton("dl_tabla_CDE_crec", "Descarga la tabla"),
          br(),
          br()
          
        )
      ),
      
      # * 2.4. Productividad ----
      
      tabPanel(
        "Productividad",
        
        br(),
        sidebarPanel(
          width = 3,
          # style = "position:fixed;width:22%;",
          
          selectInput(
            inputId = "indicador_CDE_prod",
            label = "Indicador",
            choices = sort(unique(d_CDE_prod$NOMINDICADOR)),
            selected = 2019
          ),
          
          uiOutput("selector_CDE_prod"),
          
          br(),
          
          tags$a(href="https://umad.cienciassociales.edu.uy/", 
                 "Unidad de Métodos y Acceso a Datos",
                 style = "font-size:12px; color:Navy;
                             text-decoration:underline;"),
          br(),
          br(),
          img(src = "logo_umad.png", height="70%",
              width = "70%", align = "left"),
          style = "display:inline-block;",
        ),
        mainPanel(
          tags$h3(style="display:inline-block",
                  uiOutput("title_CDE_prod")),
          div(style="display:inline-block", 
              dropdown(
                style = "minimal",
                status = "primary",
                width = "500px",
                right = TRUE,
                icon = icon("calculator", lib = "font-awesome"),
                uiOutput("info_CDE_prod"))
          ),
          div(style="display:inline-block", 
              dropdown(
                style = "minimal",
                status = "primary",
                width = "500px",
                right = TRUE,
                icon = icon("exclamation", lib = "font-awesome"),
                uiOutput("rel_CDE_prod"))
          ),
          div(style="display:inline-block", 
              dropdown(
                style = "minimal",
                status = "primary",
                width = "500px",
                right = TRUE,
                icon = icon("clock", lib = "font-awesome"),
                uiOutput("actualizacion_CDE_prod"))
          ),
          tags$h5(uiOutput("subtitle_CDE_prod")),
          br(),
          withSpinner(plotOutput("p_CDE_prod", height = "500px" ),
                      type = 2),
          br(),
          downloadButton(outputId = "baja_p_CDE_prod", 
                         label = "Descarga el gráfico"),
          br(),
          br(),
          withSpinner(DTOutput("tab_CDE_prod"), type = 2),
          br(),
          downloadButton("dl_tabla_CDE_prod", "Descarga la tabla"),
          br(),
          br()
        )
        
      ),
      
      #  * 2.5. Estructura productiva  ----
      
      tabPanel(
        "Estructura Productiva",
        
        br(),
        sidebarPanel(
          width = 3,
          # style = "position:fixed;width:22%;",
          
          selectInput(
            inputId = "indicador_CDE_estr",
            label = "Indicador",
            choices = sort(unique(d_CDE_estr$NOMINDICADOR)),
            selected = "Valor agregado bruto sectorial (% PIB) según WDI"
          ),
          
          uiOutput("selector_CDE_estr"),
          
          br(),
          
          uiOutput("chbox_CDE_estr"),

          tags$a(href="https://umad.cienciassociales.edu.uy/", 
                 "Unidad de Métodos y Acceso a Datos",
                 style = "font-size:12px; color:Navy;
                             text-decoration:underline;"),
          br(),
          br(),
          img(src = "logo_umad.png", height="70%",
              width = "70%", align = "left"),
          style = "display:inline-block;",
        ),
        mainPanel(
          tags$h3(style="display:inline-block",
                  uiOutput("title_CDE_estr")),
          div(style="display:inline-block", 
              dropdown(
                style = "minimal",
                status = "primary",
                width = "500px",
                right = TRUE,
                icon = icon("calculator", lib = "font-awesome"),
                uiOutput("info_CDE_estr"))
          ),
          div(style="display:inline-block", 
              dropdown(
                style = "minimal",
                status = "primary",
                width = "500px",
                right = TRUE,
                icon = icon("exclamation", lib = "font-awesome"),
                uiOutput("rel_CDE_estr"))
          ),
          div(style="display:inline-block", 
              dropdown(
                style = "minimal",
                status = "primary",
                width = "500px",
                right = TRUE,
                icon = icon("clock", lib = "font-awesome"),
                uiOutput("actualizacion_CDE_estr"))
          ),
          tags$h5(uiOutput("subtitle_CDE_estr")),
          br(),
          withSpinner(plotOutput("p_CDE_estr", height = "500px" ), type = 2),
          br(),
          downloadButton(outputId = "baja_p_CDE_estr", 
                         label = "Descarga el gráfico"),
          br(),
          br(),
          uiOutput("p_CDE_estr_2out", width = "100%", height = "800px"),
          br(),
          br(),
          uiOutput("p_CDE_estr_t5", width = "100%", height = "800px"),
          conditionalPanel(
            condition = "input.indicador_CDE_estr != 'Índice de diversificación de las exportaciones según UNCTAD'",
            downloadButton(outputId = "baja_p_CDE_estr_t5", 
                           label = "Descarga el gráfico")),
          br(),
          br(),
          DTOutput("tab_CDE_estr"),
          br(),
          downloadButton("dl_tabla_CDE_estr", "Descarga la tabla"), 
          br(),
          br()
        )
        
      ),
      
      # tabPanel(
      #   "Desarrollo económico",
      #   
      #   br(),
      #   sidebarPanel(
      #     width = 3,
      #     # style = "position:fixed;width:22%;",
      #     
      #     selectInput(
      #       inputId = "indicador_CDE_de",
      #       label = "Indicador",
      #       choices = sort(unique(d_CDE_de$NOMINDICADOR)),
      #       selected = 2019
      #     ),
      #     
      #     dateRangeInput("fecha_CDE_de",
      #                    label = "Rango de tiempo",
      #                    start = min(d_CDE_de$fecha),
      #                    end = max(d_CDE_de$fecha),
      #                    min = min(d_CDE_de$fecha),
      #                    max = max(d_CDE_de$fecha),
      #                    format = "mm/yyyy",
      #                    startview = "year"
      #     ),
      #     
      #     tags$a(href="https://umad.cienciassociales.edu.uy/", 
      #            "Unidad de Métodos y Acceso a Datos",
      #            style = "font-size:12px; color:Navy;
      #                        text-decoration:underline;"),
      #     br(),
      #     br(),
      #     img(src = "logo_umad.png", height="70%",
      #         width = "70%", align = "left"),
      #     style = "display:inline-block;",
      #   ),
      #   mainPanel(
      #     tags$h3(style="display:inline-block",
      #             uiOutput("title_CDE_de")),
      #     div(style="display:inline-block", 
      #         dropdown(
      #           style = "minimal",
      #           status = "primary",
      #           width = "500px",
      #           right = TRUE,
      #           icon = icon("calculator", lib = "font-awesome"),
      #           uiOutput("info_CDE_de"))
      #     ),
      #     div(style="display:inline-block", 
      #         dropdown(
      #           style = "minimal",
      #           status = "primary",
      #           width = "500px",
      #           right = TRUE,
      #           icon = icon("exclamation", lib = "font-awesome"),
      #           uiOutput("rel_CDE_de"))
      #     ),
      #     tags$h5(uiOutput("subtitle_CDE_de")),
      #     br(),
      #     plotOutput("p_CDE_de", height = "500px" ),
      #     br(),
      #     downloadButton(outputId = "baja_p_CDE_de", 
      #                    label = "Descarga el gráfico"),
      #     br(),
      #     br(),
      #     DTOutput("tab_CDE_de"),
      #     br(),
      #     downloadButton("dl_tabla_CDE_de", "Descarga la tabla"),
      #     br(),
      #     br()
      #   )
      #   
      # ),
      
      #  * 2.6. Inversión  ----
      
      tabPanel(
        "Inversión",
        
        br(),
        sidebarPanel(
          width = 3,
          # style = "position:fixed;width:22%;",
          
          selectInput(
            inputId = "indicador_CDE_inv",
            label = "Indicador",
            choices = sort(unique(d_CDE_inv$NOMINDICADOR)),
            selected = "Flujos de IED recibidos (% PIB) según UNCTAD"
            ),
          
          uiOutput("selector_CDE_inv_fecha"),
          
          br(),
          
          uiOutput("chbox_CDE_inv"),
          
          uiOutput("selector_CDE_inv"),

          tags$a(href="https://umad.cienciassociales.edu.uy/", 
                 "Unidad de Métodos y Acceso a Datos",
                 style = "font-size:12px; color:Navy;
                             text-decoration:underline;"),
          br(),
          br(),
          img(src = "logo_umad.png", height="70%",
              width = "70%", align = "left"),
          style = "display:inline-block;",
        ),
        mainPanel(
          tags$h3(style="display:inline-block",
                  uiOutput("title_CDE_inv")),
          div(style="display:inline-block", 
              dropdown(
                style = "minimal",
                status = "primary",
                width = "500px",
                right = TRUE,
                icon = icon("calculator", lib = "font-awesome"),
                uiOutput("info_CDE_inv"))
          ),
          div(style="display:inline-block", 
              dropdown(
                style = "minimal",
                status = "primary",
                width = "500px",
                right = TRUE,
                icon = icon("exclamation", lib = "font-awesome"),
                uiOutput("rel_CDE_inv"))
          ),
          div(style="display:inline-block", 
              dropdown(
                style = "minimal",
                status = "primary",
                width = "500px",
                right = TRUE,
                icon = icon("clock", lib = "font-awesome"),
                uiOutput("actualizacion_CDE_inv"))
          ),
          tags$h5(uiOutput("subtitle_CDE_inv")),
          br(),
          withSpinner(plotOutput("p_CDE_inv", height = "500px" ), type = 2),
          br(),
          downloadButton(outputId = "baja_p_CDE_inv", 
                         label = "Descarga el gráfico"),
          br(),
          br(),
          withSpinner(uiOutput("p_CDE_inv_2out", width = "100%", height = "800px"),
                      type = 2),
          conditionalPanel(
            condition = paste0(paste0("[",toString(paste0("'",c(lista_inst, lista_rec),"'")),"]"),".includes(input.indicador_CDE_inv)"),
            downloadButton(outputId = "baja_p_CDE_inv_ag", 
                           label = "Descarga el gráfico")),
          br(),
          br(),
          DTOutput("tab_CDE_inv"),
          br(),
          downloadButton("dl_tabla_CDE_inv", "Descarga la tabla"),
          br(),
          br()
        )
        
      ),
      
      #  * 2.7. Capital Humano  ----
      
      tabPanel(
        "CTI / Capital humano",
        
        br(),
        sidebarPanel(
          width = 3,
          # style = "position:fixed;width:22%;",
          
          selectInput(
            inputId = "indicador_CDE_cti",
            label = "Indicador",
            choices = sort(unique(d_CDE_cti$NOMINDICADOR)),
            selected = 2019
          ),
          
          uiOutput("selector_CDE_cti_fecha"),
          
          br(),
          
          uiOutput("chbox_CDE_cti"),
          
          br(),
          
          tags$a(href="https://umad.cienciassociales.edu.uy/", 
                 "Unidad de Métodos y Acceso a Datos",
                 style = "font-size:12px; color:Navy;
                             text-decoration:underline;"),
          br(),
          br(),
          img(src = "logo_umad.png", height="70%",
              width = "70%", align = "left"),
          style = "display:inline-block;",
          
        ),
        mainPanel(
          tags$h3(style="display:inline-block",
                  uiOutput("title_CDE_cti")),
          div(style="display:inline-block", 
              dropdown(
                style = "minimal",
                status = "primary",
                width = "500px",
                right = TRUE,
                icon = icon("calculator", lib = "font-awesome"),
                uiOutput("info_CDE_cti"))
          ),
          div(style="display:inline-block", 
              dropdown(
                style = "minimal",
                status = "primary",
                width = "500px",
                right = TRUE,
                icon = icon("exclamation", lib = "font-awesome"),
                uiOutput("rel_CDE_cti"))
          ),
          div(style="display:inline-block", 
              dropdown(
                style = "minimal",
                status = "primary",
                width = "500px",
                right = TRUE,
                icon = icon("clock", lib = "font-awesome"),
                uiOutput("actualizacion_CDE_cti"))
          ),
          tags$h5(uiOutput("subtitle_CDE_cti")),
          br(),
          withSpinner(plotOutput("p_CDE_cti", height = "500px" ), type = 2),
          br(),
          downloadButton(outputId = "baja_p_CDE_cti", 
                         label = "Descarga el gráfico"),
          br(),
          br(),
          DTOutput("tab_CDE_cti"),
          br(),
          downloadButton("dl_tabla_CDE_cti", "Descarga la tabla"),
          br(),
          br()
        )
        
      )
      
    )
  ),
  
  #  * 2.8. Ambiente  ----
  
  tabPanel(
    
    title = "Ambiente", icon = icon("tree"),
    
    tabsetPanel(
      type = "pills",
      id   = "Amb",
      
      tabPanel(
        "Ambiente",
        br(),
        sidebarPanel(
          width = 3,
          # style = "position:fixed;width:22%;",
          
          selectInput(
            inputId = "indicador_AMB_amb",
            label = "Indicador",
            choices = sort(unique(d_AMB_amb$NOMINDICADOR)),
            selected = 2019
          ),
          
          uiOutput("selector_AMB_amb_fecha"),
          
          br(),
          
          tags$a(href="https://umad.cienciassociales.edu.uy/", 
                 "Unidad de Métodos y Acceso a Datos",
                 style = "font-size:12px; color:Navy;
                             text-decoration:underline;"),
          br(),
          br(),
          img(src = "logo_umad.png", height="70%",
              width = "70%", align = "left"),
          style = "display:inline-block;",
          
        ),
        
        mainPanel(
          tags$h3(style="display:inline-block",
                  uiOutput("title_AMB_amb")),
          div(style="display:inline-block", 
              dropdown(
                style = "minimal",
                status = "primary",
                width = "500px",
                right = TRUE,
                icon = icon("calculator", lib = "font-awesome"),
                uiOutput("info_AMB_amb"))
          ),
          div(style="display:inline-block", 
              dropdown(
                style = "minimal",
                status = "primary",
                width = "500px",
                right = TRUE,
                icon = icon("exclamation", lib = "font-awesome"),
                uiOutput("rel_AMB_amb"))
          ),
          div(style="display:inline-block", 
              dropdown(
                style = "minimal",
                status = "primary",
                width = "500px",
                right = TRUE,
                icon = icon("clock", lib = "font-awesome"),
                uiOutput("actualizacion_AMB_amb"))
          ),
          tags$h5(uiOutput("subtitle_AMB_amb")),
          br(),
          withSpinner(plotOutput("p_AMB_amb", height = "500px" ), type = 2),
          br(),
          downloadButton(outputId = "baja_p_AMB_amb",
                         label = "Descarga el gráfico"),
          br(),
          br(),
          DTOutput("tab_AMB_amb"),
          br(),
          downloadButton("dl_tabla_AMB_amb", "Descarga la tabla"),
          br(),
          br()
        )
      )
      
    )
  ),
  
  
  tabPanel(
    
    title = "Sector público", icon = icon("briefcase"),
    
    tabsetPanel(
      type = "pills",
      id   = "Amb",
      
      #  * 2.9. Deuda  ----
      
      tabPanel(
        "Deuda",
        br(),
        sidebarPanel(
          width = 3,
          # style = "position:fixed;width:22%;",
          
          selectInput(
            inputId = "indicador_SP_deuda",
            label = "Indicador",
            choices = sort(unique(d_SP_deuda$NOMINDICADOR)),
            selected = 2019
          ),
          
          uiOutput("selector_SP_deuda_fecha"),
          
          br(),
          
          uiOutput("chbox_SP_deuda"),
          
          tags$a(href="https://umad.cienciassociales.edu.uy/", 
                 "Unidad de Métodos y Acceso a Datos",
                 style = "font-size:12px; color:Navy;
                             text-decoration:underline;"),
          br(),
          br(),
          img(src = "logo_umad.png", height="70%",
              width = "70%", align = "left"),
          style = "display:inline-block;",
          
        ),
        
        mainPanel(
          tags$h3(style="display:inline-block",
                  uiOutput("title_SP_deuda")),
          div(style="display:inline-block", 
              dropdown(
                style = "minimal",
                status = "primary",
                width = "500px",
                right = TRUE,
                icon = icon("calculator", lib = "font-awesome"),
                uiOutput("info_SP_deuda"))
          ),
          div(style="display:inline-block", 
              dropdown(
                style = "minimal",
                status = "primary",
                width = "500px",
                right = TRUE,
                icon = icon("exclamation", lib = "font-awesome"),
                uiOutput("rel_SP_deuda"))
          ),
          div(style="display:inline-block", 
              dropdown(
                style = "minimal",
                status = "primary",
                width = "500px",
                right = TRUE,
                icon = icon("clock", lib = "font-awesome"),
                uiOutput("actualizacion_SP_deuda"))
          ),
          tags$h5(uiOutput("subtitle_SP_deuda")),
          br(),
          withSpinner(plotOutput("p_SP_deuda", height = "500px" ), type = 2),
          br(),
          downloadButton(outputId = "baja_p_SP_deuda",
                         label = "Descarga el gráfico"),
          br(),
          br(),
          withSpinner(uiOutput("p_SP_deuda_2out", width = "100%", height = "800px"),
                      type = 2),
          conditionalPanel(
            condition = paste0(paste0("[",toString(paste0("'",c(lista_deuda),"'")),"]"),".includes(input.indicador_SP_deuda)"),
            downloadButton(outputId = "baja_p_SP_deuda_ag", 
                           label = "Descarga el gráfico")),
          br(),
          br(),
          DTOutput("tab_SP_deuda"),
          br(),
          downloadButton("dl_tabla_SP_deuda", "Descarga la tabla"),
          br(),
          br()
        )
      ),
      
      #  * 2.10. Empleo  ----
      
      tabPanel(
        
        "Empleo",
        br(),
        sidebarPanel(
          width = 3,
          # style = "position:fixed;width:22%;",
          
          selectInput(
            inputId = "indicador_SP_empleo",
            label = "Indicador",
            choices = sort(unique(d_SP_empleo$NOMINDICADOR)),
            selected = 2019
          ),
          
          uiOutput("selector_SP_empleo_fecha"),
          
          br(),
          
          uiOutput("chbox_SP_empleo"),

          tags$a(href="https://umad.cienciassociales.edu.uy/", 
                 "Unidad de Métodos y Acceso a Datos",
                 style = "font-size:12px; color:Navy;
                             text-decoration:underline;"),
          br(),
          br(),
          img(src = "logo_umad.png", height="70%",
              width = "70%", align = "left"),
          style = "display:inline-block;",
        ),
        mainPanel(
          tags$h3(style="display:inline-block",
                  uiOutput("title_SP_empleo")),
          div(style="display:inline-block", 
              dropdown(
                style = "minimal",
                status = "primary",
                width = "500px",
                right = TRUE,
                icon = icon("calculator", lib = "font-awesome"),
                uiOutput("info_SP_empleo"))
          ),
          div(style="display:inline-block", 
              dropdown(
                style = "minimal",
                status = "primary",
                width = "500px",
                right = TRUE,
                icon = icon("exclamation", lib = "font-awesome"),
                uiOutput("rel_SP_empleo"))
          ),
          div(style="display:inline-block", 
              dropdown(
                style = "minimal",
                status = "primary",
                width = "500px",
                right = TRUE,
                icon = icon("clock", lib = "font-awesome"),
                uiOutput("actualizacion_SP_empleo"))
          ),
          tags$h5(uiOutput("subtitle_SP_empleo")),
          br(),
          withSpinner(plotOutput("p_SP_empleo", height = "500px" ), type = 2),
          br(),
          downloadButton(outputId = "baja_p_SP_empleo", 
                         label = "Descarga el gráfico"),
          br(),
          br(),
          withSpinner(uiOutput("p_SP_empleo_2out", width = "100%", height = "800px"),
                      type = 2),
          conditionalPanel(
            condition = paste0(paste0("[",toString(paste0("'",c(lista_empleo),"'")),"]"),".includes(input.indicador_SP_empleo)"),
            downloadButton(outputId = "baja_p_SP_empleo_ag", 
                           label = "Descarga el gráfico")),
          br(),
          br(),
          DTOutput("tab_SP_empleo"),
          br(),
          downloadButton("dl_tabla_SP_empleo", "Descarga la tabla"),
          br(),
          br()
        )
      ),
      
      #  * 2.11. Gasto  ----
      
      tabPanel(
        
        "Gasto",
        br(),
        sidebarPanel(
          width = 3,
          # style = "position:fixed;width:22%;",
          
          selectInput(
            inputId = "indicador_SP_gasto",
            label = "Indicador",
            choices = sort(unique(d_SP_gasto$NOMINDICADOR)),
            selected = 2019
          ),
          
          uiOutput("selector_SP_gasto_fecha"),
          
          br(),
          
          uiOutput("chbox_SP_gasto"),

          tags$a(href="https://umad.cienciassociales.edu.uy/", 
                 "Unidad de Métodos y Acceso a Datos",
                 style = "font-size:12px; color:Navy;
                             text-decoration:underline;"),
          br(),
          br(),
          img(src = "logo_umad.png", height="70%",
              width = "70%", align = "left"),
          style = "display:inline-block;",
        ),
        
        mainPanel(
          tags$h3(style="display:inline-block",
                  uiOutput("title_SP_gasto")),
          div(style="display:inline-block", 
              dropdown(
                style = "minimal",
                status = "primary",
                width = "500px",
                right = TRUE,
                icon = icon("calculator", lib = "font-awesome"),
                uiOutput("info_SP_gasto"))
          ),
          div(style="display:inline-block", 
              dropdown(
                style = "minimal",
                status = "primary",
                width = "500px",
                right = TRUE,
                icon = icon("exclamation", lib = "font-awesome"),
                uiOutput("rel_SP_gasto"))
          ),
          div(style="display:inline-block", 
              dropdown(
                style = "minimal",
                status = "primary",
                width = "500px",
                right = TRUE,
                icon = icon("clock", lib = "font-awesome"),
                uiOutput("actualizacion_SP_gasto"))
          ),
          tags$h5(uiOutput("subtitle_SP_gasto")),
          br(),
          withSpinner(plotOutput("p_SP_gasto", height = "500px" ), type = 2),
          br(),
          downloadButton(outputId = "baja_p_SP_gasto", 
                         label = "Descarga el gráfico"),
          br(),
          br(),
          withSpinner(uiOutput("p_SP_gasto_2out", width = "100%", height = "800px"),
                      type = 2),
          conditionalPanel(
            condition = paste0(paste0("[",toString(paste0("'",c(lista_gasto),"'")),"]"),".includes(input.indicador_SP_gasto)"),
            downloadButton(outputId = "baja_p_SP_gasto_2", 
                           label = "Descarga el gráfico")),
          br(),
          br(),
          DTOutput("tab_SP_gasto"),
          br(),
          downloadButton("dl_tabla_SP_gasto", "Descarga la tabla"),
          br(),
          br()
        )
      ),
      
      #  * 2.12. Educación  ----
      
      tabPanel(
        
        "Educación",
        br(),
        sidebarPanel(
          width = 3,
          # style = "position:fixed;width:22%;",
          
          selectInput(
            inputId = "indicador_SP_edu",
            label = "Indicador",
            choices = sort(unique(d_SP_edu$NOMINDICADOR)),
            selected = 2019
          ),
          
          uiOutput("selector_SP_edu_fecha"),
          
          br(),
          
          uiOutput("chbox_SP_edu"),
          
          tags$a(href="https://umad.cienciassociales.edu.uy/", 
                 "Unidad de Métodos y Acceso a Datos",
                 style = "font-size:12px; color:Navy;
                             text-decoration:underline;"),
          br(),
          br(),
          img(src = "logo_umad.png", height="70%",
              width = "70%", align = "left"),
          style = "display:inline-block;",
        ),
        
        mainPanel(
          tags$h3(style="display:inline-block",
                  uiOutput("title_SP_edu")),
          div(style="display:inline-block", 
              dropdown(
                style = "minimal",
                status = "primary",
                width = "500px",
                right = TRUE,
                icon = icon("calculator", lib = "font-awesome"),
                uiOutput("info_SP_edu"))
          ),
          div(style="display:inline-block", 
              dropdown(
                style = "minimal",
                status = "primary",
                width = "500px",
                right = TRUE,
                icon = icon("exclamation", lib = "font-awesome"),
                uiOutput("rel_SP_edu"))
          ),
          div(style="display:inline-block", 
              dropdown(
                style = "minimal",
                status = "primary",
                width = "500px",
                right = TRUE,
                icon = icon("clock", lib = "font-awesome"),
                uiOutput("actualizacion_SP_edu"))
          ),
          tags$h5(uiOutput("subtitle_SP_edu")),
          br(),
          withSpinner(plotOutput("p_SP_edu", height = "500px" ), type = 2),
          br(),
          downloadButton(outputId = "baja_p_SP_edu", 
                         label = "Descarga el gráfico"),
          br(),
          br(),
          withSpinner(uiOutput("p_SP_edu_2out", width = "100%", height = "800px"),
                      type = 2),
          conditionalPanel(
            condition = paste0(paste0("[",toString(paste0("'",c(lista_edu),"'")),"]"),".includes(input.indicador_SP_edu)"),
            downloadButton(outputId = "baja_p_SP_edu_2", 
                           label = "Descarga el gráfico")),
          br(),
          br(),
          DTOutput("tab_SP_edu"),
          br(),
          downloadButton("dl_tabla_SP_edu", "Descarga la tabla"),
          br(),
          br()
        )
      )
      
    )
  )
)


server <- function(session, input, output) {
  
  ##  3.  COMPETITIVIDAD (CP_comp)   ========================================
  
  
referencias <- "<br><b>Referencias:</b> K = miles; M = millones; B = billones. <br>
                * Los valores usan el separador decimal inglés: los números luego 
                de puntos son decimales, y las comas separan los miles. "
  
  ## CP_comp 
  
  # Data CP_comp 
  CP_comp <- reactive({
    
    req(input$indicador_CP_comp)
    
    d_CP_comp %>%
      filter(NOMINDICADOR == input$indicador_CP_comp) %>% 
      select(NOMINDICADOR, fecha, VALOR, VALOR_ORIGINAL, anio, mes_anio,
             categoria, FUENTE, DEFINICION, `FORMA DE CALCULO`, RELEVANCIA,
             JERARQUIA, fecha_num, ACTUALIZACION)
    
  })

  
    # Info: forma de CALCULO
  output$info_CP_comp <- renderUI({ 
    helpText(HTML(paste("<b>Forma de cálculo:</b>", 
                        unique(CP_comp()$`FORMA DE CALCULO`),
                        referencias)))
  })
  
  # Relevancia:
  output$rel_CP_comp <- renderUI({ 
    helpText(HTML(paste("<b>Relvancia:</b>", unique(CP_comp()$RELEVANCIA))))
  })
  
  # Title
  output$title_CP_comp <- renderUI({ 
    helpText(HTML(unique(CP_comp()$NOMINDICADOR)))
  })

  # Subtitle
  output$subtitle_CP_comp <- renderUI({ 
    helpText(HTML(unique(CP_comp()$DEFINICION)))
  })
  
  # Actualización
  output$actualizacion_CP_comp <- renderUI({ 
    helpText(HTML(paste("<b>Última actualización:</b>", unique(CP_comp()$ACTUALIZACION))))
  })

  ## Selectores ractivos
  output$selector_CP_comp <- renderUI({
    
    if(input$indicador_CP_comp %in% list_barras_CP_comp) {
      
      selectInput(
        inputId = "anio_CP_comp",
        label = "Seleccione año:",
        choices = d_CP_comp %>% 
          filter(NOMINDICADOR == input$indicador_CP_comp) %>%
          drop_na(VALOR) %>%
          select(anio) %>%
          arrange(desc(anio)) %>% 
          unique() %>% 
          pull(),
        selected = "2019"
      )

    } else if(input$indicador_CP_comp %in% list_barras_CP_comp_men) {
        
        selectInput(
          inputId = "mes_anio_CP_comp",
          label = "Seleccione mes-año:",
          choices = d_CP_comp %>% 
            filter(NOMINDICADOR == input$indicador_CP_comp) %>%
            drop_na(VALOR) %>%
            select(mes_anio) %>%
            arrange(desc(mes_anio)) %>% 
            unique() %>% 
            pull(),
          selected = "Jan-2020"
        )
        
    } else if(input$indicador_CP_comp %in% list_barras_CP_comp_anual){ 
      
      sliderInput("fecha_CP_comp", 
                  label = "Rango de tiempo", 
                  sep = "",
                  dragRange = T,
                  min = min(CP_comp()$fecha_num), 
                  max = max(CP_comp()$fecha_num), 
                  value = c(min(CP_comp()$fecha_num), 
                            max(CP_comp()$fecha_num))
      )
  
    } else if(input$indicador_CP_comp %in% lista_simple_mensual){ 

      
      tagList(
        tags$style(type = 'text/css', 
                   '#big_slider .irs-grid-text {font-size: 10px; transform: rotate(-90deg) translate(-15px);} ,.irs-grid-pol.large {height: 0px;}'),
                   div(id = 'big_slider',
            
      sliderTextInput( inputId = "fecha_CP_comp_mensual",
                       label = "Rango de tiempo",
                       choices = sort(zoo::as.yearmon(unique(CP_comp()$fecha))),
                       selected = c(zoo::as.yearmon(min(CP_comp()$fecha)),
                                    zoo::as.yearmon(max(CP_comp()$fecha))),
                       hide_min_max = T,
                       grid = TRUE,
                       width = "100%")      
      
        )#div close
      )#taglst close
      
    } else if(input$indicador_CP_comp %in% lista_simple_CP_comp){ 
      
      tagList(
        tags$style(type = 'text/css', 
                   '#big_slider .irs-grid-text {font-size: 12px; transform: rotate(-90deg) translate(-10px);} ,.irs-grid-pol.large {height: 0px;}'),
        div(id = 'big_slider',
            
            sliderInput("fecha_CP_comp", 
                  label = "Rango de tiempo", 
                  sep = "",
                  dragRange = T,
                  min = min(CP_comp()$fecha_num), 
                  max = max(CP_comp()$fecha_num), 
                  value = c(min(CP_comp()$fecha_num), 
                            max(CP_comp()$fecha_num))
                  )
        ))
    } 
    
  }) 
  
  
  output$selector_CP_comp_2 <- renderUI({
    
if(input$indicador_CP_comp %in% list_barras_CP_comp_anual){ 

  checkboxGroupInput(inputId = "chbox_filtro_cpcomp",
                     label = "Seleccione categorias",
                     inline = TRUE,
                     choices = CP_comp() %>%
                       distinct(categoria) %>%
                       pull(),
                     selected = CP_comp() %>%
                       filter(JERARQUIA == 1) %>%
                       distinct(categoria) %>%
                       pull()
  )
}  
  }) 
  
  # Gráficos CP_comp
  output$p_CP_comp <- renderPlot({
    
    req(input$fecha_CP_comp, input$indicador_CP_comp)
    
    if(input$indicador_CP_comp %in% list_barras_CP_comp) {
      
      req(input$anio_CP_comp)
      
      base_plot_CP_comp <-  CP_comp() %>% 
        filter(anio == input$anio_CP_comp)  
      
      validate(need(nrow(base_plot_CP_comp) > 0, 
                    'No hay datos disponible para esta búsqueda'))
      
      plot_CP_comp  <- base_plot_CP_comp %>%      
        top_n(20, VALOR) %>% 
        filter(categoria != "TOTAL GENERAL",
               categoria != "Total general",
               categoria != "Total empresas",
               categoria != "Total",
               categoria != "TOTAL") %>% 
        mutate(categoria = str_trunc(categoria, 75)) %>% 
        ggplot(aes(x = fct_reorder(categoria, VALOR), y = VALOR)) +
        geom_bar(stat = "identity", color = "black", fill = "#2c3e50", alpha =.9) +
        coord_flip() +
        theme(axis.text.x = element_text(angle = 0),
              legend.position = "none") +
        labs(x = "",
             y = "",
             title = paste(input$indicador_CP_comp, "(top 20)"),
             caption = wrapit(paste("Fuente: Unidad de Métodos y Acceso a Datos (FCS - UdelaR) en base a datos de", 
                                    unique(CP_comp()$FUENTE)))) +
        scale_y_continuous(labels = addUnits)
      
      print(plot_CP_comp)
      ggsave("www/indicador CP.png", width = 30, height = 30, units = "cm")
      
      } else if(input$indicador_CP_comp %in% list_barras_CP_comp_men) {
        
        req(input$mes_anio_CP_comp)
        
        base_plot_CP_comp <-  CP_comp() %>% 
          filter(mes_anio == input$mes_anio_CP_comp)  
        
        validate(need(nrow(base_plot_CP_comp) > 0, 'No hay datos disponible para esta búsqueda'))
        
        plot_CP_comp  <- base_plot_CP_comp %>%      
          top_n(20, VALOR) %>% 
          filter(categoria != "TOTAL IMPORTACIONES CIF",
                 categoria != "TOTAL IMPORTACIONES CIF") %>% 
          mutate(categoria = str_trunc(categoria, 75)) %>% 
          ggplot(aes(x = fct_reorder(categoria, VALOR), y = VALOR)) +
          geom_bar(stat = "identity", color = "black", fill = "#2c3e50", alpha =.9) +
          coord_flip() +
          theme(axis.text.x = element_text(angle = 0),
                legend.position = "none") +
          labs(x = "",
               y = "",
               title = paste(input$indicador_CP_comp, "(top 20)"),
               caption = wrapit(paste("Fuente: Unidad de Métodos y Acceso a Datos (FCS - UdelaR) en base a datos de", 
                                      unique(CP_comp()$FUENTE)))) +
          scale_y_continuous(labels = addUnits)
        
        
        print(plot_CP_comp)
        ggsave("www/indicador CP.png", width = 30, height = 30, units = "cm")
        
    } else if(input$indicador_CP_comp %in% list_barras_CP_comp_anual){ 

      plot_CP_comp <- ggplot(data =  CP_comp() %>% 
                               filter(fecha_num >= input$fecha_CP_comp[1] &
                                        fecha_num <= input$fecha_CP_comp[2]) %>% 
                                filter(categoria %in% input$chbox_filtro_cpcomp),
                              aes(x = fecha, y = VALOR, color = categoria)) +
        geom_line(size = 1, alpha = 0.5) +
        geom_point(size = 3) +
        theme(axis.text.x = element_text(angle = 0),
              legend.position = "bottom") +
        labs(x = "",
             y = "",
             title = input$indicador_SP_deuda,
             caption = wrapit(paste("Fuente: Unidad de Métodos y Acceso a Datos (FCS - UdelaR) en base a datos de",
                                    unique(CP_comp()$FUENTE)))) +
        scale_y_continuous(labels = addUnits) +
        scale_color_viridis(name = " ", discrete = T, direction = 1)
      
      print(plot_CP_comp)
      ggsave("www/indicador CP.png", width = 30, height = 20, units = "cm")
      
    } else if(input$indicador_CP_comp %in% lista_simple_mensual){ 

      req(input$fecha_CP_comp_mensual, input$indicador_CP_comp)
      
      plot_CP_comp <- ggplot(data =  CP_comp() %>%
                               filter(fecha >= as.POSIXct(zoo::as.yearmon(input$fecha_CP_comp_mensual[1])) &
                                        fecha <= as.POSIXct(zoo::as.yearmon(input$fecha_CP_comp_mensual[2]))),
                             aes(x = fecha, y = VALOR)) +
        geom_line(size = 1, color = "#476481", alpha = 0.5) +
        geom_point(color = "#476481", size = 3) +
        theme(axis.text.x = element_text(angle = 0),
              legend.position = "none") +
        labs(x = "",
             y = "",
             title = input$indicador_CP_comp,
             caption = wrapit(paste("Fuente: Unidad de Métodos y Acceso a Datos (FCS - UdelaR) en base a datos de",
                                    unique(CP_comp()$FUENTE)))) +
        scale_y_continuous(labels = addUnits)
      
      print(plot_CP_comp)
      ggsave("www/indicador CP.png", width = 30, height = 20, units = "cm")

            
    } else if(input$indicador_CP_comp %in% lista_simple_CP_comp){ 
      
      req(input$fecha_CP_comp, input$indicador_CP_comp)
      
      plot_CP_comp <- ggplot(data =  CP_comp() %>% 
                               filter(fecha_num >= input$fecha_CP_comp[1] &
                                        fecha_num <= input$fecha_CP_comp[2]),
                             aes(x = fecha, y = VALOR)) +
        geom_line(size = 1, color = "#476481", alpha = 0.5) +
        geom_point(color = "#476481", size = 3) +
        theme(axis.text.x = element_text(angle = 0),
              legend.position = "none") +
        labs(x = "",
             y = "",
             title = input$indicador_CP_comp,
             caption = wrapit(paste("Fuente: Unidad de Métodos y Acceso a Datos (FCS - UdelaR) en base a datos de",
                                    unique(CP_comp()$FUENTE)))) +
        scale_y_continuous(labels = addUnits)
      
      print(plot_CP_comp)
      ggsave("www/indicador CP.png", width = 30, height = 20, units = "cm")
    
      }
  })
  
    
output$p_CP_comp_t5_p <- renderPlot({
    
  if(input$indicador_CP_comp == "Empresas exportadoras (USD corrientes) según Uruguay XXI") {
    
    req(input$fecha_CP_comp, input$indicador_CP_comp)
    
    base_plot_CP_comp <-  CP_comp() %>% 
      filter(categoria == "Total empresas") 
    
    plot_CP_comp_t5  <- base_plot_CP_comp %>%      
      ggplot(aes(x = fecha, y = VALOR, color = categoria)) +
      geom_line(size = 1, alpha = 0.5) +
      geom_point(size = 3) +
      theme(axis.text.x = element_text(angle = 0),
            legend.position = "bottom") +
      labs(x = "",
           y = "",
           title = input$indicador_CP_comp,
           caption = wrapit(paste("Fuente: Unidad de Métodos y Acceso a Datos (FCS - UdelaR) en base a datos de", 
                                  unique(CP_comp()$FUENTE)))) +
      scale_y_continuous(labels = addUnits) +
      scale_color_viridis(name = "", discrete=TRUE) 
    
    print(plot_CP_comp_t5)
    ggsave("www/indicador CP_t5.png", width = 40, height = 20, units = "cm")
    
      
  } else { 

    
    req(input$fecha_CP_comp, input$indicador_CP_comp)
    
    base_plot_CP_comp <-  CP_comp() %>% 
      filter(categoria != "TOTAL GENERAL",
             categoria != "Total general",
             categoria != "Total empresas",
             categoria != "Total",
             categoria != "TOTAL") %>% 
      mutate(categoria = str_trunc(categoria, 75)) %>%
      add_count(categoria, wt = VALOR, name = "temp") %>%
      mutate(temp = dense_rank(desc(temp))) %>%
      filter(temp %in% 1:5) %>%
      select(-temp)
    
    plot_CP_comp_t5  <- base_plot_CP_comp %>%      
      ggplot(aes(x = fecha, y = VALOR, color = categoria)) +
      geom_line(size = 1, alpha = 0.5) +
      geom_point(size = 3) +
      theme(axis.text.x = element_text(angle = 0),
            legend.position = "bottom") +
      labs(x = "",
           y = "",
           title = paste(input$indicador_CP_comp, "(top 5 histórico)"),
           caption = wrapit(paste("Fuente: Unidad de Métodos y Acceso a Datos (FCS - UdelaR) en base a datos de", 
                                  unique(CP_comp()$FUENTE)))) +
      scale_y_continuous(labels = addUnits) +
      scale_color_viridis(name = "", discrete=TRUE) 
    
    print(plot_CP_comp_t5)
    ggsave("www/indicador CP_t5.png", width = 40, height = 20, units = "cm")
  
    }
  
  })


output$p_CP_comp_api<- renderPlot({
  
  req(input$fecha_CP_comp, input$indicador_CP_comp)
  
plot_CP_comp  <- ggplot(data = CP_comp() %>% 
                          filter(fecha_num >= input$fecha_CP_comp[1] &
                                   fecha_num <= input$fecha_CP_comp[2]) %>%
                          filter(categoria != "Total"),
                        aes(x = fecha, y = VALOR, fill = categoria)) +
  geom_col(color = "black", alpha = .8) +
  theme(axis.text.x = element_text(angle = 0),
        legend.position = "bottom") +
  labs(x = "",
       y = "",
       title = input$indicador_CP_comp,
       caption = wrapit(paste("Fuente: Unidad de Métodos y Acceso a Datos (FCS - UdelaR) en base a datos de", 
                              unique(CP_comp()$FUENTE)))) +
  scale_y_continuous(labels = addUnits) +
  scale_fill_brewer(name = "Flujo de IMPORTACION", palette = "Blues")

print(plot_CP_comp)
ggsave("www/indicador CP.png", width = 30, height = 30, units = "cm")

})


  output$p_CP_comp_t5 <- renderUI({
  
    if(input$indicador_CP_comp %in% c(list_barras_CP_comp, list_barras_CP_comp_men)) {
      
    plotOutput("p_CP_comp_t5_p")
      
    } else if(input$indicador_CP_comp %in% list_barras_CP_comp_anual){ 
     
       plotOutput("p_CP_comp_api")
  
    } else {
      
      NULL
    }
      })
    
  # Botón descarga grafico
  output$baja_p_CP_comp <- downloadHandler(
    filename <- function() {
      paste("indicador CP", "png", sep = ".")
    },
    
    content <- function(file) {
      file.copy("www/indicador CP.png", file)
    },
    contentType = "www/indicador CP"
  )
  
  
  output$baja_p_CP_comp_t5 <- downloadHandler(
    filename <- function() {
      paste("indicador CP_t5", "png", sep = ".")
    },
    
    content <- function(file) {
      file.copy("www/indicador CP_t5.png", file)
    },
    contentType = "www/indicador CP_t5"
  )

  
  
  # Data para tabla y exportar 
  CP_comp_1 <- reactive({
    
    req(input$anio_CP_comp)
    
    CP_comp() %>%
      mutate(anio = format(fecha, format = "%Y")) %>%
      filter(anio == input$anio_CP_comp) %>%
      select(anio, categoria, VALOR_ORIGINAL) %>%
      arrange(anio, fct_reorder(categoria, -VALOR_ORIGINAL)) 
  })
  
  CP_comp_2 <- reactive({
    
    req(input$mes_anio_CP_comp)
    
    CP_comp() %>%
      mutate(anio = format(fecha, format = "%Y-%m")) %>%
      filter(mes_anio == input$mes_anio_CP_comp) %>% 
      select(mes_anio, categoria, VALOR_ORIGINAL) %>%
      arrange(mes_anio, fct_reorder(categoria, -VALOR_ORIGINAL)) 
    
  })
  
  CP_comp_3 <- reactive({
    CP_comp() %>%
      filter(fecha_num >= input$fecha_CP_comp[1] &
               fecha_num <= input$fecha_CP_comp[2]) %>% 
      mutate(fecha = format(fecha, format = "%Y")) %>% 
      select(fecha, categoria, VALOR_ORIGINAL) %>%
      arrange(desc(fecha), fct_reorder(categoria, -VALOR_ORIGINAL)) %>% 
      pivot_wider(names_from = categoria,
                  values_from = VALOR_ORIGINAL)
    
  })

    CP_comp_4 <- reactive({
    CP_comp() %>%
        filter(fecha_num >= input$fecha_CP_comp[1] &
                 fecha_num <= input$fecha_CP_comp[2]) %>% 
      mutate(fecha = format(fecha, format = "%Y")) %>% 
      select(fecha, VALOR_ORIGINAL) %>%
      arrange(desc(fecha))
  })

    CP_comp_5 <- reactive({
      CP_comp() %>%
        filter(fecha >= as.POSIXct(zoo::as.yearmon(input$fecha_CP_comp_mensual[1])) &
                 fecha <= as.POSIXct(zoo::as.yearmon(input$fecha_CP_comp_mensual[2]))) %>% 
        mutate(fecha = format(fecha, format = "%Y-%m")) %>% 
        select(fecha, VALOR_ORIGINAL) %>%
        arrange(desc(fecha))
    })
    
    
    
  # Data completa 
  CP_comp_1_c <- reactive({
    d_CP_comp %>%
      mutate(fecha = format(fecha, format = "%Y")) %>%
      filter(NOMINDICADOR == input$indicador_CP_comp) %>% 
      select(anio, categoria, VALOR_ORIGINAL) %>%
      arrange(anio, fct_reorder(categoria, -VALOR_ORIGINAL)) %>% 
      pivot_wider(names_from = categoria,
                  values_from = VALOR_ORIGINAL)
  })
  
  CP_comp_2_c <- reactive({
    d_CP_comp %>%
      mutate(fecha = format(fecha, format = "%Y-%m")) %>%
      filter(NOMINDICADOR == input$indicador_CP_comp) %>% 
      select(fecha, categoria, VALOR_ORIGINAL) %>%
      arrange(desc(fecha), fct_reorder(categoria, -VALOR_ORIGINAL)) %>% 
      pivot_wider(names_from = categoria,
                  values_from = VALOR_ORIGINAL)
    
  })
  
  CP_comp_3_c <- reactive({
    d_CP_comp %>%
      mutate(fecha = format(fecha, format = "%Y")) %>%
      filter(NOMINDICADOR == input$indicador_CP_comp) %>% 
      select(fecha, categoria, VALOR_ORIGINAL) %>%
      arrange(desc(fecha), fct_reorder(categoria, -VALOR_ORIGINAL)) %>% 
      pivot_wider(names_from = categoria,
                  values_from = VALOR_ORIGINAL)
    
  })
  
  CP_comp_4_c <- reactive({
    d_CP_comp %>%
      mutate(fecha = format(fecha, format = "%Y")) %>%
      filter(NOMINDICADOR == input$indicador_CP_comp) %>% 
      select(fecha, VALOR_ORIGINAL) %>%
      arrange(desc(fecha))
  })
  
  CP_comp_5_c <- reactive({
    d_CP_comp %>%
      mutate(fecha = format(fecha, format = "%Y-%m")) %>%
      filter(NOMINDICADOR == input$indicador_CP_comp) %>% 
      select(fecha, VALOR_ORIGINAL) %>%
      arrange(desc(fecha))
  })

    # Metadata 
  CP_comp_b <- reactive({
    CP_comp() %>%
      select(NOMINDICADOR, FUENTE, DEFINICION, `FORMA DE CALCULO`, RELEVANCIA) %>% 
      mutate(`Unidad de Métodos y Acceso a Datos (FCS -UdelaR)` = " ") %>% 
      distinct() %>% 
      gather(key = "", value = " ")
    
  })
  
  list_df_CP_comp1 <- reactive({
    list_df_CP_comp1 <- list("Data" = CP_comp_1(),
                             "Metadata" = CP_comp_b(),
                             "Data Completa" = CP_comp_1_c())
  })
  
  list_df_CP_comp2 <- reactive({
    list_df_CP_comp1 <- list("Data" = CP_comp_2(),
                             "Metadata" = CP_comp_b(),
                             "Data Completa" = CP_comp_2_c())
  })
  
  list_df_CP_comp3 <- reactive({
    list_df_CP_comp3 <- list("Data" = CP_comp_3(), 
                             "Metadata" = CP_comp_b(),
                             "Data Completa" = CP_comp_3_c())
  })
  
  list_df_CP_comp4 <- reactive({
    list_df_CP_comp4 <- list("Data" = CP_comp_4(),
                             "Metadata" = CP_comp_b(),
                             "Data Completa" = CP_comp_4_c())
  })

  list_df_CP_comp5 <- reactive({
    list_df_CP_comp5 <- list("Data" = CP_comp_5(),
                             "Metadata" = CP_comp_b(),
                             "Data Completa" = CP_comp_5_c())
  })
  
  # Tablas en shiny
  output$tab_CP_comp <- renderDT({
    
    if(input$indicador_CP_comp %in% list_barras_CP_comp) {
      
      DT::datatable(CP_comp_1(), 
                rownames = FALSE,
                colnames = c("Año", "Categoría", "Valor"),
                caption = htmltools::tags$caption(input$indicador_CP_comp,
                                                  style = "color:black; font-size:110%;"))  %>% 
        formatCurrency(3, '', interval =3, mark = ",") 
      
      } else if(input$indicador_CP_comp %in% list_barras_CP_comp_men) {
        
      DT::datatable(CP_comp_2(), 
                rownames = FALSE,
                colnames = c("Año", "Categoría", "Valor"), 
                caption = htmltools::tags$caption(input$indicador_CP_comp,
                                                    style = "color:black; font-size:110%;"))  %>% 
        formatCurrency(3, '', mark = ",") 
      
    } else if(input$indicador_CP_comp %in% list_barras_CP_comp_anual){ 
      
      DT::datatable(CP_comp_3(), 
                rownames = FALSE,
                # colnames = c("Fecha", "Categoría", "Valor"),
                caption = htmltools::tags$caption(input$indicador_CP_comp,
                                                  style = "color:black; font-size:110%;"))  
      
    } else if(input$indicador_CP_comp %in% lista_simple_mensual){ 
      
      DT::datatable(CP_comp_5(), 
                    rownames = FALSE,
                    colnames = c("Fecha", "Valor"),
                    caption = htmltools::tags$caption(input$indicador_CP_comp,
                                                      style = "color:black; font-size:110%;")) %>% 
        formatCurrency(2, '', mark = ",")
    
    } else if(input$indicador_CP_comp %in% lista_simple_CP_comp){ 
      
      DT::datatable(CP_comp_4(), 
                rownames = FALSE,
                colnames = c("Fecha", "Valor"),
                caption = htmltools::tags$caption(input$indicador_CP_comp,
                                                  style = "color:black; font-size:110%;")) %>% 
        formatCurrency(2, '', mark = ",")
      
    }
    
  })

  # Descarga tabla
  output$dl_tabla_CP_comp <- downloadHandler(
    
    filename = function() {
      paste("resultados-", input$indicador_CP_comp, ".xlsx", sep = "")
    },
    content = function(file) {
      if(input$indicador_CP_comp %in% list_barras_CP_comp) {
        
        openxlsx::write.xlsx(list_df_CP_comp1(), file)
        
      } else if(input$indicador_CP_comp %in% list_barras_CP_comp_men) {
          
          openxlsx::write.xlsx(list_df_CP_comp2(), file)
        
      } else if(input$indicador_CP_comp == "Importaciones anuales de bienes y servicios CIF (millones USD corrientes)"){ 
        
        openxlsx::write.xlsx(list_df_CP_comp3(), file) 
      
        } else if(input$indicador_CP_comp %in% lista_simple_CP_comp){ 
        
        openxlsx::write.xlsx(list_df_CP_comp4(), file) 
       
        } else if(input$indicador_CP_comp %in% lista_simple_CP_comp){ 

          openxlsx::write.xlsx(list_df_CP_comp5(), file) 
          
      }
    }
  )
  
  
  ##  4.  PRECIOS (CP_precios)  =============================================
  
  # Data CP_precios 
  
  CP_precios_pre <- reactive({
    
  d_CP_precios %>%
    filter(NOMINDICADOR == input$indicador_CP_precios)
           
  })
    
  output$selector_CP_precios <- renderUI({
    
    tagList(
      tags$style(type = 'text/css', 
                 '#big_slider .irs-grid-text {font-size: 12px; transform: rotate(-90deg) translate(-10px);} ,.irs-grid-pol.large {height: 0px;}'),
      div(id = 'big_slider',
          
          sliderInput("fecha_CP_precios", 
                label = "Rango de tiempo", 
                sep = "",
                dragRange = T,
                min = min(CP_precios_pre()$fecha_num), 
                max = max(CP_precios_pre()$fecha_num), 
                value = c(min(CP_precios_pre()$fecha_num), 
                          max(CP_precios_pre()$fecha_num))
    )))
    
  })

  CP_precios <- reactive({
    
    req(input$fecha_CP_precios, input$indicador_CP_precios)
    
    CP_precios_pre() %>%
      filter(fecha_num >= input$fecha_CP_precios[1] &
               fecha_num <= input$fecha_CP_precios[2]) %>% 
      select(NOMINDICADOR, fecha, VALOR, VALOR_ORIGINAL, FUENTE, DEFINICION,
             `FORMA DE CALCULO`, RELEVANCIA, fecha_num, ACTUALIZACION)
    
  })
  
  # Info: forma de CALCULO
  output$info_CP_precios <- renderUI({ 
    helpText(HTML(paste("<b>Forma de cálculo:</b>", 
                        unique(CP_precios()$`FORMA DE CALCULO`),
                        referencias)))
  })
  
  # Relevancia:
  output$rel_CP_precios <- renderUI({ 
    helpText(HTML(paste("<b>Relvancia:</b>", unique(CP_precios()$RELEVANCIA))))
  })
  
  # Title
  output$title_CP_precios <- renderUI({ 
    helpText(HTML(unique(CP_precios()$NOMINDICADOR)))
  })
  
  # Subtitle
  output$subtitle_CP_precios <- renderUI({ 
    helpText(HTML(unique(CP_precios()$DEFINICION)))
  })
  
  # Actualización
  output$actualizacion_CP_precios <- renderUI({ 
    helpText(HTML(paste("<b>Última actualización:</b>", unique(CP_precios()$ACTUALIZACION))))
  })

  # Gráficos CP_precios
  output$p_CP_precios <- renderPlot({
    
    req(input$fecha_CP_precios, input$indicador_CP_precios)
    
    plot_CP_precios <- ggplot(data =  CP_precios(), aes(x = fecha, y = VALOR)) +
      geom_line(size = 1, color = "#476481", alpha = 0.5) +
      geom_point(size = 3, color = "#476481") +
      theme(axis.text.x = element_text(angle = 0),
            legend.position = "none") +
      labs(x = "",
           y = "",
           title = input$indicador_CP_precios,
           caption = wrapit(paste("Fuente: Unidad de Métodos y Acceso a Datos (FCS - UdelaR) en base a datos de",
                                  unique(CP_precios()$FUENTE)))) +
      scale_y_continuous(labels = addUnits)
    
    print(plot_CP_precios)
    ggsave("www/indicador precios.png", width = 30, height = 20, units = "cm")
    
  })
  
  
  # Botón descarga gráfico
  output$baja_p_CP_precios <- downloadHandler(
    filename <- function() {
      paste("indicador precios", "png", sep = ".")
    },
    
    content <- function(file) {
      file.copy("www/indicador precios.png", file)
    },
    contentType = "www/indicador precios"
  )
  
  # Data para tabla y exportar 
  CP_precios_1 <- reactive({
    
    CP_precios() %>%
      filter(fecha_num >= input$fecha_CP_precios[1] &
               fecha_num <= input$fecha_CP_precios[2]) %>% 
      mutate(fecha = format(fecha, format = "%Y")) %>% 
      select(fecha, VALOR_ORIGINAL) %>%
      arrange(desc(fecha))
    
  })
  
  # Data completa 
  CP_precios_1_c <- reactive({
    d_CP_precios %>%
      mutate(fecha = format(fecha, format = "%Y")) %>%
      filter(NOMINDICADOR == input$indicador_CP_precios) %>% 
      select(fecha, VALOR_ORIGINAL) %>%
      arrange(desc(fecha))
  })
  
  # Metadata 
  CP_precios_b <- reactive({
    CP_precios() %>%
      select(NOMINDICADOR, FUENTE, DEFINICION, `FORMA DE CALCULO`, RELEVANCIA) %>% 
      mutate(`Unidad de Métodos y Acceso a Datos (FCS -UdelaR)` = " ") %>% 
      distinct() %>% 
      gather(key = "", value = " ")
    
  })
  
  list_df_CP_precios <- reactive({
    list_df_CP_precios <- list("Data" = CP_precios_1(), 
                               "Metadata" = CP_precios_b(),
                               "Data completa" = CP_precios_1_c())
  })
  
  # Tablas
  output$tab_CP_precios <- renderDT({
    
    DT::datatable(CP_precios_1(),
              colnames = c("Fecha", "Valor"),
              rownames = FALSE,
              caption = htmltools::tags$caption(input$indicador_CP_precios,
                                                style = "color:black; font-size:110%;")) %>% 
      formatCurrency(2, '', mark = ",")
    
  })
  
  # Descarga tabla
  output$dl_tabla_CP_precios <- downloadHandler(
    
    filename = function() {
      paste("resultados-", input$indicador_CP_precios, ".xlsx", sep = "")
    },
    content = function(file) {

        openxlsx::write.xlsx(list_df_CP_precios(), file)
        
    }
  )
  
  ##  5.  CRECIMIENTO (CDE_crec)   ==========================================
  
  # Data CDE_crec 
  CDE_crec <- reactive({
    
    req(input$indicador_CDE_crec)

    d_CDE_crec %>%
      filter(NOMINDICADOR == input$indicador_CDE_crec) %>% 
    select(NOMINDICADOR, fecha, VALOR, VALOR_ORIGINAL, FUENTE, 
           DEFINICION, JERARQUIA, `FORMA DE CALCULO`, RELEVANCIA, 
           dpto, anio, fecha_num, ACTUALIZACION)
    
  })
  
  # Info: forma de CALCULO
  output$info_CDE_crec <- renderUI({ 
    helpText(HTML(paste("<b>Forma de cálculo:</b>",
                        unique(CDE_crec()$`FORMA DE CALCULO`),
                        referencias)))
  })
  
  # Relevancia:
  output$rel_CDE_crec <- renderUI({ 
    helpText(HTML(paste("<b>Relvancia:</b>", unique(CDE_crec()$RELEVANCIA))))
  })
  
  # Title
  output$title_CDE_crec <- renderUI({ 
    helpText(HTML(unique(CDE_crec()$NOMINDICADOR)))
  })
  
  # Subtitle
  output$subtitle_CDE_crec <- renderUI({ 
    helpText(HTML(unique(CDE_crec()$DEFINICION)))
  })
  
  # Actualización
  output$actualizacion_CDE_crec <- renderUI({ 
    helpText(HTML(paste("<b>Última actualización:</b>", unique(CDE_crec()$ACTUALIZACION))))
  })

  ## Selectores ractivos
  output$selector_CDE_crec <- renderUI({
    
    if(input$indicador_CDE_crec %in% lista_pordepto) {
      
      selectInput(
        inputId = "anio_CDE_crec",
        label = "Seleccione año:",
        choices = d_CDE_crec %>% 
          filter(NOMINDICADOR == input$indicador_CDE_crec) %>%
          select(anio) %>%
          drop_na() %>% 
          arrange(desc(anio)) %>% 
          unique() %>% 
          pull(),
        selected = "2018"
      )
      
    } else if(input$indicador_CDE_crec %notin% lista_pordepto){ 
      
      tagList(
        tags$style(type = 'text/css', 
                   '#big_slider .irs-grid-text {font-size: 12px; transform: rotate(-90deg) translate(-10px);} ,.irs-grid-pol.large {height: 0px;}'),
        div(id = 'big_slider',
      
      sliderInput("fecha_CDE_crec", 
                  label = "Rango de tiempo", 
                  sep = "",
                  dragRange = T,
                  min = min(CDE_crec()$fecha_num), 
                  max = max(CDE_crec()$fecha_num), 
                  value = c(min(CDE_crec()$fecha_num), 
                            max(CDE_crec()$fecha_num))
      )
        ))
      
    } else {
      return(NULL)
    }
  }) 
  
  
  # Gráficos CDE_crec
  output$p_CDE_crec <- renderPlot({
    
    req(input$fecha_CDE_crec, input$indicador_CDE_crec)
    
    if(input$indicador_CDE_crec %in% lista_pordepto) {
      
      req(input$anio_CDE_crec)
      
      base_plot_CDE_crec <-  CDE_crec() %>% 
        filter(anio == input$anio_CDE_crec)  
      
      validate(need(nrow(base_plot_CDE_crec) > 0, 'No hay datos disponible para esta búsqueda'))
      
      plot_CDE_crec  <- base_plot_CDE_crec %>%      
        ggplot(aes(x = fct_reorder(dpto, VALOR), y = VALOR, fill = dpto)) +
        geom_bar(stat = "identity", color = "black", fill = "#2c3e50", alpha =.9) +
        coord_flip() +
        theme(axis.text.x = element_text(angle = 0),
              legend.position = "none") +
        labs(x = "",
             y = "",
             title = input$indicador_CDE_crec,
             caption = wrapit(paste("Fuente: Unidad de Métodos y Acceso a Datos (FCS - UdelaR) en base a datos de", 
                                    unique(CDE_crec()$FUENTE)))) +
        scale_y_continuous(labels = addUnits)
        
      print(plot_CDE_crec)
      ggsave("www/indicador crecimiento.png", width = 30, height = 20, units = "cm")
      
    
    } else if(input$indicador_CDE_crec %in% lista_CDE_crec_simple){ 
      
      plot_CDE_crec <- ggplot(data =  CDE_crec() %>% 
                                filter(fecha_num >= input$fecha_CDE_crec[1] &
                                         fecha_num <= input$fecha_CDE_crec[2]),
                              aes(x = fecha, y = VALOR)) +
        geom_line(size = 1, color = "#476481", alpha = 0.5) +
        geom_point(size = 3, color = "#476481") +
        theme(axis.text.x = element_text(angle = 0),
              legend.position = "none") +
        labs(x = "",
             y = "",
             title = input$indicador_CDE_crec,
             caption = wrapit(paste("Fuente: Unidad de Métodos y Acceso a Datos (FCS - UdelaR) en base a datos de",
                                    unique(CDE_crec()$FUENTE)))) +
        scale_y_continuous(labels = addUnits)
      
      print(plot_CDE_crec)
      ggsave("www/indicador crecimiento.png", width = 30, height = 20, units = "cm")
       
    }
  })
  
  
  output$p_CDE_crec_t5_p <- renderPlot({
    
    if(input$indicador_CDE_crec %in% lista_pordepto) {
      
    req(input$fecha_CDE_crec, input$indicador_CDE_crec)
    
    base_plot_CDE_crec <-  CDE_crec() %>% 
      mutate(dpto = str_trunc(dpto, 75)) %>%
      add_count(dpto, wt = VALOR, name = "temp") %>%
      mutate(temp = dense_rank(desc(temp))) %>%
      filter(temp %in% 1:5) %>%
      select(-temp)
    
    plot_CDE_crec_t5  <- base_plot_CDE_crec %>%      
      ggplot(aes(x = fecha, y = VALOR, color = dpto)) +
      geom_line(size = 1, alpha = 0.5) +
      geom_point(size = 3) +
      theme(axis.text.x = element_text(angle = 0),
            legend.position = "bottom") +
      labs(x = "",
           y = "",
           title = paste(input$indicador_CDE_crec, "(top 5 histórico)"),
           caption = wrapit(paste("Fuente: Unidad de Métodos y Acceso a Datos (FCS - UdelaR) en base a datos de", 
                                  unique(CDE_crec()$FUENTE)))) +
      scale_y_continuous(labels = addUnits) +
      scale_color_viridis(name = "", discrete=TRUE) 
    
    print(plot_CDE_crec_t5)
    ggsave("www/indicador crecimiento_2.png", width = 40, height = 20, units = "cm")
    
    }
  })
  
  output$p_CDE_crec_t5 <- renderUI({
    
    if(input$indicador_CDE_crec %in% lista_pordepto) {
      
      plotOutput("p_CDE_crec_t5_p")
      
    } else {
      
      NULL
    }
  })
  
  # Botón descarga gráfico
  output$baja_p_CDE_crec <- downloadHandler(
    filename <- function() {
      paste("indicador crecimiento", "png", sep = ".")
    },
    
    content <- function(file) {
      file.copy("www/indicador crecimiento.png", file)
    },
    contentType = "www/indicador crecimiento"
  )
  
  
  output$baja_p_CDE_crec_t5 <- downloadHandler(
    filename <- function() {
      paste("indicador crecimiento_2", "png", sep = ".")
    },
    
    content <- function(file) {
      file.copy("www/indicador crecimiento_2.png", file)
    },
    contentType = "www/indicador crecimiento_2"
  )
  

  # Data para tabla y exportar 
  CDE_crec_1 <- reactive({
    
    CDE_crec() %>%
      mutate(anio = format(fecha, format = "%Y")) %>%
      filter(anio == input$anio_CDE_crec) %>% 
      select(anio, dpto, VALOR_ORIGINAL) %>%
      arrange(anio, fct_reorder(dpto, -VALOR_ORIGINAL))
    
  })
  
  CDE_crec_2 <- reactive({
    
    req(input$fecha_CDE_crec, input$indicador_CDE_crec)
    
    CDE_crec() %>%
      filter(fecha_num >= input$fecha_CDE_crec[1] &
               fecha_num <= input$fecha_CDE_crec[2]) %>% 
      mutate(fecha = format(fecha, format = "%Y")) %>% 
      select(fecha, VALOR_ORIGINAL) %>%
      arrange(desc(fecha))
    
  })

  # Data completa 
  CDE_crec_1_c <- reactive({
    d_CDE_crec %>%
      mutate(anio = format(fecha, format = "%Y")) %>%
      filter(NOMINDICADOR == input$indicador_CDE_crec) %>% 
      select(anio, dpto, VALOR_ORIGINAL) %>%
      arrange(anio, fct_reorder(dpto, -VALOR_ORIGINAL)) %>% 
      pivot_wider(names_from = dpto,
                  values_from = VALOR_ORIGINAL)
  })
  
  CDE_crec_2_c <- reactive({
    d_CDE_crec %>%
      mutate(fecha = format(fecha, format = "%Y")) %>%
      filter(NOMINDICADOR == input$indicador_CDE_crec) %>% 
      select(fecha, VALOR_ORIGINAL) %>%
      arrange(desc(fecha))
  })
  
  # Metadata 
  CDE_crec_b <- reactive({
    CDE_crec() %>%
      select(NOMINDICADOR, FUENTE, DEFINICION, `FORMA DE CALCULO`, RELEVANCIA) %>% 
      mutate(`Unidad de Métodos y Acceso a Datos (FCS -UdelaR)` = " ") %>% 
      distinct() %>% 
      gather(key = "", value = " ")
    
  })
  
  list_df_CDE_crec1 <- reactive({
    list_df_CDE_crec1 <- list("Data" = CDE_crec_1(),
                              "Metadata" = CDE_crec_b(),
                              "Data completa" = CDE_crec_1_c())
  })
  
  list_df_CDE_crec2 <- reactive({
    list_df_CDE_crec2 <- list("Data" = CDE_crec_2(), 
                              "Metadata" = CDE_crec_b(),
                              "Data completa" = CDE_crec_2_c())
  })
  
  # Tablas en shiny
  output$tab_CDE_crec <- renderDT({
    
    if(input$indicador_CDE_crec %in% lista_pordepto) {
      
      DT::datatable(CDE_crec_1(), 
                    options = list(pageLength = 20),
                    rownames = FALSE,
                # colnames = c("Año", "Departamento", "Valor"),
                caption = htmltools::tags$caption(input$indicador_CDE_crec,
                                                  style = "color:black; font-size:110%;")) %>%
        formatCurrency(3, '', mark = ",")
      
      
    } else if(input$indicador_CDE_crec %notin% lista_pordepto){ 
      
      DT::datatable(CDE_crec_2(), 
                rownames = FALSE,
                colnames = c("Fecha", "Valor"),
                caption = htmltools::tags$caption(input$indicador_CDE_crec,
                                                  style = "color:black; font-size:110%;")) %>% 
        formatCurrency(2, '', mark = ",")
      
    }
    
  })
  
  
  # Descarga tabla
  output$dl_tabla_CDE_crec <- downloadHandler(
    
    filename = function() {
      paste("resultados-", input$indicador_CDE_crec, ".xlsx", sep = "")
    },
    content = function(file) {
      if(input$indicador_CDE_crec %in% lista_pordepto) {
        
        openxlsx::write.xlsx(list_df_CDE_crec1(), file)
        
      } else if(input$indicador_CDE_crec %notin% lista_pordepto){ 
        
        openxlsx::write.xlsx(list_df_CDE_crec2(), file) 
        
      }
    }
  )
  
  

  ##  6.  PRODUCTIVIDAD (CDE_prod)   ========================================
  
  # Data CP_precios 
  CDE_prod <- reactive({
    
    req(input$indicador_CDE_prod)

        d_CDE_prod %>%
      filter(NOMINDICADOR == input$indicador_CDE_prod) 
        
  })
  
  # Info: forma de CALCULO
  output$info_CDE_prod <- renderUI({ 
    helpText(HTML(paste("<b>Forma de cálculo:</b>", 
                        unique(CDE_prod()$`FORMA DE CALCULO`),
                        referencias)))
  })
  
  # Relevancia:
  output$rel_CDE_prod <- renderUI({ 
    helpText(HTML(paste("<b>Relvancia:</b>", unique(CDE_prod()$RELEVANCIA))))
  })
  
  # Title
  output$title_CDE_prod <- renderUI({ 
    helpText(HTML(unique(CDE_prod()$NOMINDICADOR)))
  })
  
  # Subtitle
  output$subtitle_CDE_prod <- renderUI({ 
    helpText(HTML(unique(CDE_prod()$DEFINICION)))
  })
  
  # Actualización
  output$actualizacion_CDE_prod <- renderUI({ 
    helpText(HTML(paste("<b>Última actualización:</b>", unique(CDE_prod()$ACTUALIZACION))))
  })
  
  output$selector_CDE_prod <- renderUI({
    
    tagList(
      tags$style(type = 'text/css', 
                 '#big_slider .irs-grid-text {font-size: 12px; transform: rotate(-90deg) translate(-10px);} ,.irs-grid-pol.large {height: 0px;}'),
      div(id = 'big_slider',
          
    sliderInput("fecha_CDE_prod", 
                label = "Rango de tiempo", 
                sep = "",
                dragRange = T,
                min = min(CDE_prod()$fecha_num), 
                max = max(CDE_prod()$fecha_num), 
                value = c(min(CDE_prod()$fecha_num), 
                          max(CDE_prod()$fecha_num))
                )
    ))
    
  })
  
  # Gráficos CDE_prod
  output$p_CDE_prod <- renderPlot({
    
    req(input$fecha_CDE_prod, input$indicador_CDE_prod)
    
    plot_CDE_prod <- ggplot(data =  CDE_prod() %>% 
                              filter(fecha_num >= input$fecha_CDE_prod[1] &
                                       fecha_num <= input$fecha_CDE_prod[2]),
                            aes(x = fecha, y = VALOR)) +
      geom_line(size = 1, color = "#476481", alpha = 0.5) +
      geom_point(size = 3, color = "#476481") +
      theme(axis.text.x = element_text(angle = 0),
            legend.position = "none") +
      labs(x = "",
           y = "",
           title = input$indicador_CDE_prod,
           caption = wrapit(paste("Fuente: Unidad de Métodos y Acceso a Datos (FCS - UdelaR) en base a datos de",
                                  unique(CDE_prod()$FUENTE)))) +
      scale_y_continuous(labels = addUnits)
    
    print(plot_CDE_prod)
    ggsave("www/indicador productividad.png", width = 30, height = 20, units = "cm")
    
  })
  
  
  # Botón descarga
  output$baja_p_CDE_prod <- downloadHandler(
    filename <- function() {
      paste("indicador productividad", "png", sep = ".")
    },
    
    content <- function(file) {
      file.copy("www/indicador productividad.png", file)
    },
    contentType = "www/indicador productividad"
  )
  
  # Data para tabla y exportar 
  CDE_prod_1 <- reactive({
    
    CDE_prod() %>%
      filter(fecha_num >= input$fecha_CDE_prod[1] &
               fecha_num <= input$fecha_CDE_prod[2]) %>% 
      mutate(fecha = format(fecha, format = "%Y")) %>% 
      select(fecha, VALOR_ORIGINAL) %>%
      arrange(desc(fecha))
  })
  
  # Data completa 
  CDE_prod_1_c <- reactive({
    d_CDE_prod %>%
      mutate(fecha = format(fecha, format = "%Y")) %>%
      filter(NOMINDICADOR == input$indicador_CDE_prod) %>% 
      select(fecha, VALOR_ORIGINAL) %>%
      arrange(desc(fecha))
  })
  
  # Metadata 
  CDE_prod_b <- reactive({
    CDE_prod() %>%
      select(NOMINDICADOR, FUENTE, DEFINICION, `FORMA DE CALCULO`, RELEVANCIA) %>% 
      mutate(`Unidad de Métodos y Acceso a Datos (FCS -UdelaR)` = " ") %>% 
      distinct() %>% 
      gather(key = "", value = " ")
    
  })
  
  list_df_CDE_prod <- reactive({
    list_df_CDE_prod <- list("Data" = CDE_prod_1(), 
                             "Metadata" = CDE_prod_b(),
                             "Data completa" = CDE_prod_1_c())
  })
  
  # Tablas
  output$tab_CDE_prod <- renderDT({
    
    DT::datatable(CDE_prod_1(),
              rownames = FALSE,
              colnames = c("Fecha", "Valor"),
              caption = htmltools::tags$caption(input$indicador_CDE_prod,
                                                style = "color:black; font-size:110%;")) %>% 
      formatCurrency(2, '', mark = ",")
    
  })
  
  # Descarga tabla
  output$dl_tabla_CDE_prod <- downloadHandler(
    
    filename = function() {
      paste("resultados-", input$indicador_CDE_prod, ".xlsx", sep = "")
    },
    content = function(file) {
      
      openxlsx::write.xlsx(list_df_CDE_prod(), file)
      
    }
  )
  
  
  ##  7.  Estructura Productiva (CDE_estr)   =================================
  
  # Data CP_precios 
  CDE_estr <- reactive({
    
    req(input$indicador_CDE_estr)
    
    d_CDE_estr %>%
      filter(NOMINDICADOR == input$indicador_CDE_estr) %>% 
      select(NOMINDICADOR, fecha, VALOR, VALOR_ORIGINAL, anio,
             categoria, sector, FUENTE, DEFINICION, `FORMA DE CALCULO`,
             RELEVANCIA, JERARQUIA, fecha_num, ACTUALIZACION)
    
  })
  
  
  # Selector reactivo
  output$selector_CDE_estr <- renderUI({
    
    if(input$indicador_CDE_estr %in% lista_CDE_estr_barras) {
      
      selectInput(
        inputId = "anio_CDE_estr",
        label = "Seleccione año:",
        choices = d_CDE_estr %>% 
          filter(NOMINDICADOR == input$indicador_CDE_estr) %>%
          select(anio) %>%
          drop_na() %>% 
          arrange(desc(anio)) %>% 
          unique() %>% 
          pull(),
        selected = d_CDE_estr %>% 
          filter(NOMINDICADOR == input$indicador_CDE_estr) %>%
          select(anio) %>%
          drop_na() %>% 
          summarise(max = max(anio)) %>% 
          pull()
      )
      
    } else if(input$indicador_CDE_estr != "Exportaciones de servicios (millones USD corrientes)"){ 
      
      tagList(
        tags$style(type = 'text/css', 
                   '#big_slider .irs-grid-text {font-size: 12px; transform: rotate(-90deg) translate(-10px);} ,.irs-grid-pol.large {height: 0px;}'),
        div(id = 'big_slider',
            
      sliderInput("fecha_CDE_estr", 
                  label = "Rango de tiempo", 
                  sep = "",
                  dragRange = T,
                  min = min(CDE_estr()$fecha_num), 
                  max = max(CDE_estr()$fecha_num), 
                  value = c(min(CDE_estr()$fecha_num), 
                            max(CDE_estr()$fecha_num))
      )))
      
    } else {
      return(NULL)
    }
  }) 
  

  # Info: forma de CALCULO
  output$info_CDE_estr <- renderUI({ 
    helpText(HTML(paste("<b>Forma de cálculo:</b>",
                        unique(CDE_estr()$`FORMA DE CALCULO`),
                        referencias)))
  })
  
  # Relevancia:
  output$rel_CDE_estr <- renderUI({ 
    helpText(HTML(paste("<b>Relvancia:</b>", unique(CDE_estr()$RELEVANCIA))))
  })
  
  # Title
  output$title_CDE_estr <- renderUI({ 
    helpText(HTML(unique(CDE_estr()$NOMINDICADOR)))
  })
  
  # Subtitle
  output$subtitle_CDE_estr <- renderUI({ 
    helpText(HTML(unique(CDE_estr()$DEFINICION)))
  })
  
  # Actualización
  output$actualizacion_CDE_estr <- renderUI({ 
    helpText(HTML(paste("<b>Última actualización:</b>", unique(CDE_estr()$ACTUALIZACION))))
  })
  
  output$chbox_CDE_estr <- renderUI({
    
    if(input$indicador_CDE_estr %in% list_CDE_estr_2) {
      
      req(input$indicador_CDE_estr)
      
      checkboxGroupInput(
        inputId = "chbox_CDE_estr",
        label = "Seleccione categorias",
        inline = TRUE,
        choices = CDE_estr() %>% 
          distinct(sector) %>%
          pull(),
        selected = CDE_estr() %>% 
          filter(JERARQUIA == 1) %>% 
          distinct(sector) %>%
          pull()
      )
      
    } else {
      
      NULL
    }
    
  })    
  
  
  # Gráficos CDE_estr
  output$p_CDE_estr <- renderPlot({
    
 if(input$indicador_CDE_estr %in% lista_CDE_estr_barras){ 
    
    req(input$indicador_CDE_estr, input$anio_CDE_estr)
    
    base_plot_CDE_estr <-  CDE_estr() %>% 
      filter(anio == input$anio_CDE_estr)  
    
    validate(need(nrow(base_plot_CDE_estr) > 0, 'No hay datos disponible para esta búsqueda'))
    
    plot_CDE_estr  <- base_plot_CDE_estr %>%      
      top_n(20, VALOR) %>% 
      filter(categoria != "TOTAL") %>% 
      mutate(categoria = str_trunc(categoria, 75)) %>% 
      ggplot(aes(x = fct_reorder(categoria, VALOR), y = VALOR)) +
      geom_bar(stat = "identity", color = "black", fill = "#2c3e50", alpha =.9) +
      coord_flip() +
      theme(axis.text.x = element_text(angle = 0),
            legend.position = "none") +
      labs(x = "",
           y = "",
           title = paste(input$indicador_CDE_estr, "(top 20)"),
           caption = wrapit(paste("Fuente: Unidad de Métodos y Acceso a Datos (FCS - UdelaR) en base a datos de", 
                                  unique(CDE_estr()$FUENTE)))) +
      scale_y_continuous(labels = addUnits)
    
    print(plot_CDE_estr)
    ggsave("www/indicador estructura productiva.png", width = 30, height = 30, units = "cm")
    
  } else if(input$indicador_CDE_estr == "Índice de diversificación de las exportaciones según UNCTAD"){ 
    
    plot_CDE_estr <- ggplot(data =  CDE_estr() %>% 
                              filter(fecha_num >= input$fecha_CDE_estr[1] &
                                       fecha_num <= input$fecha_CDE_estr[2]),
                            aes(x = fecha, y = VALOR)) +
      geom_line(size = 1, color = "#476481", alpha = 0.5) +
      geom_point(size = 3, color = "#476481") +
      theme(axis.text.x = element_text(angle = 0),
            legend.position = "none") +
      labs(x = "",
           y = "",
           title = input$indicador_CDE_estr,
           caption = wrapit(paste("Fuente: Unidad de Métodos y Acceso a Datos (FCS - UdelaR) en base a datos de",
                                  unique(CDE_estr()$FUENTE)))) +
      scale_y_continuous(labels = addUnits)
    
    print(plot_CDE_estr)
    ggsave("www/indicador estructura productiva.png", width = 30, height = 20, units = "cm")
    
  } else if(input$indicador_CDE_estr %in% list_CDE_estr_2) {
    
      req(input$fecha_CDE_estr, input$chbox_CDE_estr)
    
    plot_CDE_estr <- ggplot(data = CDE_estr() %>% 
                              filter(sector %in% input$chbox_CDE_estr,
                                     fecha_num >= input$fecha_CDE_estr[1] &
                                       fecha_num <= input$fecha_CDE_estr[2]),
                            aes(x = fecha, y = VALOR, color = sector)) +
      geom_line(size = 1, alpha = 0.5) +
      geom_point(size = 3) +
      theme(axis.text.x = element_text(angle = 0),
            legend.position = "bottom") +
      labs(x = "",
           y = "",
           title = input$indicador_CDE_estr,
           caption = wrapit(paste("Fuente: Unidad de Métodos y Acceso a Datos (FCS - UdelaR) en base a datos de",
                                  unique(CDE_estr()$FUENTE)))) +
      scale_y_continuous(labels = addUnits) +
      scale_color_viridis(name = " ", discrete = T, direction = 1)
    
    print(plot_CDE_estr)
    ggsave("www/indicador estructura productiva.png", width = 30, height = 20, units = "cm")
  }
    
  })
  
  
  #Segundo gráfico
  output$p_CDE_estr_2 <- renderPlot({
  
    if(input$indicador_CDE_estr %in% list_CDE_estr_2) {
      
      plot_CDE_estr_2  <- ggplot(data = CDE_estr() %>% 
                                 filter(sector != "Total",
                                        fecha_num >= input$fecha_CDE_estr[1] &
                                          fecha_num <= input$fecha_CDE_estr[2]),
                               aes(x = fecha, y = VALOR, fill = sector)) +
        geom_col(color = "black", alpha = .8) +
        theme(axis.text.x = element_text(angle = 0),
              legend.position = "bottom") +
        labs(x = "",
             y = "",
             title = input$indicador_CDE_estr,
             caption = wrapit(paste("Fuente: Unidad de Métodos y Acceso a Datos (FCS - UdelaR) en base a datos de", 
                                    unique(CDE_estr()$FUENTE)))) +
        scale_y_continuous(labels = addUnits) +
        scale_fill_brewer(name = "Sector", palette = "Blues")
      
      print(plot_CDE_estr_2)
      ggsave("www/indicador estructura productiva 2.png", width = 30, height = 20, units = "cm")
      
    } else if(input$indicador_CDE_estr %in% lista_CDE_estr_barras) {

      req(input$fecha_CDE_estr, input$indicador_CDE_estr)
      
      base_plot_CDE_estr <-  CDE_estr() %>% 
        filter(categoria != "TOTAL GENERAL",
               categoria != "Total empresas",
               categoria != "Total",
               categoria != "TOTAL") %>% 
        mutate(categoria = str_trunc(categoria, 75)) %>%
        add_count(categoria, wt = VALOR, name = "temp") %>%
        mutate(temp = dense_rank(desc(temp))) %>%
        filter(temp %in% 1:5) %>%
        select(-temp)
      
      plot_CDE_estr_t5  <- base_plot_CDE_estr %>%      
        ggplot(aes(x = fecha, y = VALOR, color = categoria)) +
        geom_line(size = 1, alpha = 0.5) +
        geom_point(size = 3) +
        theme(axis.text.x = element_text(angle = 0),
              legend.position = "bottom") +
        labs(x = "",
             y = "",
             title = paste(input$indicador_CDE_estr, "(top 5 histórico)"),
             caption = wrapit(paste("Fuente: Unidad de Métodos y Acceso a Datos (FCS - UdelaR) en base a datos de", 
                                    unique(CDE_estr()$FUENTE)))) +
        scale_y_continuous(labels = addUnits) +
        scale_color_viridis(name = "", discrete=TRUE) 
      
      print(plot_CDE_estr_t5)
      ggsave("www/estructura productiva 2.png", width = 40, height = 20, units = "cm")
      
      
    }
    
    })
  
  
  output$p_CDE_estr_2out <- renderUI({
    
      plotOutput("p_CDE_estr_2")
      
  })
  
  output$p_CDE_estr_t5_p <- renderPlot({
    
  })
  

  # Botón descarga
  output$baja_p_CDE_estr <- downloadHandler(
    filename <- function() {
      paste("indicador estructura productiva", "png", sep = ".")
    },
    
    content <- function(file) {
      file.copy("www/indicador estructura productiva.png", file)
    },
    contentType = "www/indicador estructura productiva"
  )
  
  output$baja_p_CDE_estr_t5 <- downloadHandler(
    filename <- function() {
      paste("indicador estructura productiva 2", "png", sep = ".")
    },
    
    content <- function(file) {
      file.copy("www/indicador estructura productiva 2.png", file)
    },
    contentType = "www/indicador estructura productiva 2"
  )
  

  # Data para tabla y exportar 
  CDE_estr_1 <- reactive({
    
    req(input$indicador_CDE_estr, input$anio_CDE_estr)
    
    CDE_estr() %>%
      mutate(fecha = format(fecha, format = "%Y")) %>% 
      filter(fecha == input$anio_CDE_estr) %>% 
      select(fecha, categoria, VALOR_ORIGINAL) %>%
      arrange(desc(fecha, fct_reorder(categoria, -VALOR_ORIGINAL)))
  })
  
  # Data para tabla y exportar 
  CDE_estr_2 <- reactive({
    
    CDE_estr() %>%
      filter(fecha_num >= input$fecha_CDE_estr[1] &
               fecha_num <= input$fecha_CDE_estr[2]) %>% 
      mutate(fecha = format(fecha, format = "%Y")) %>% 
      select(fecha, VALOR_ORIGINAL) %>%
      arrange(desc(fecha, VALOR_ORIGINAL))
    
  })
  
  # Data para tabla y exportar 
  CDE_estr_3 <- reactive({
    
    CDE_estr() %>%
      filter(fecha_num >= input$fecha_CDE_estr[1] &
               fecha_num <= input$fecha_CDE_estr[2]) %>% 
      mutate(fecha = format(fecha, format = "%Y")) %>% 
      select(fecha, sector, VALOR_ORIGINAL) %>%
      arrange(desc(fecha, fct_reorder(sector, -VALOR_ORIGINAL))) %>% 
      pivot_wider(names_from = sector,
                  values_from = VALOR_ORIGINAL)
    
  })
  
  # Data completa 
  CDE_estr_1_c <- reactive({
    d_CDE_estr %>%
      filter(NOMINDICADOR == input$indicador_CDE_estr) %>%
      mutate(fecha = format(fecha, format = "%Y")) %>% 
      select(fecha, categoria, VALOR_ORIGINAL) %>%
      arrange(desc(fecha, fct_reorder(categoria, -VALOR_ORIGINAL))) %>% 
      pivot_wider(names_from = categoria,
                  values_from = VALOR_ORIGINAL)
  })
  
  CDE_estr_2_c <- reactive({
    d_CDE_estr %>%
      mutate(fecha = format(fecha, format = "%Y")) %>%
      filter(NOMINDICADOR == input$indicador_CDE_estr) %>% 
      select(fecha, VALOR_ORIGINAL) %>%
      arrange(desc(fecha, VALOR_ORIGINAL))
  })
  
  CDE_estr_3_c <- reactive({
    d_CDE_estr %>%
      filter(NOMINDICADOR == input$indicador_CDE_estr) %>% 
      mutate(fecha = format(fecha, format = "%Y")) %>% 
      select(fecha, sector, VALOR_ORIGINAL) %>%
      arrange(desc(fecha, fct_reorder(sector, -VALOR_ORIGINAL))) %>% 
      pivot_wider(names_from = sector,
                  values_from = VALOR_ORIGINAL)
  })
  
  # Metadata 
  CDE_estr_b <- reactive({
    CDE_estr() %>%
      select(NOMINDICADOR, FUENTE, DEFINICION, `FORMA DE CALCULO`, RELEVANCIA) %>% 
      mutate(`Unidad de Métodos y Acceso a Datos (FCS -UdelaR)` = " ") %>% 
      distinct() %>% 
      gather(key = "", value = " ")
    
  })
  
  list_df_CDE_estr1 <- reactive({
    list_df_CDE_estr1 <- list("Data" = CDE_estr_1(), 
                              "Metadata" = CDE_estr_b(),
                              "Data completa" = CDE_estr_1_c())
  })
  
  list_df_CDE_estr2 <- reactive({
    list_df_CDE_estr2 <- list("Data" = CDE_estr_2(),
                              "Metadata" = CDE_estr_b(),
                              "Data completa" = CDE_estr_2_c())
  })
  
  list_df_CDE_estr3 <- reactive({
    list_df_CDE_estr3 <- list("Data" = CDE_estr_3(),
                              "Metadata" = CDE_estr_b(),
                              "Data completa" = CDE_estr_3_c())
  })
  
  # Tablas
  output$tab_CDE_estr <- renderDT({
    
    if(input$indicador_CDE_estr %in% lista_CDE_estr_barras){ 
      
    DT::datatable(CDE_estr_1(),
              rownames = FALSE,
              colnames = c("Fecha", "Categoría", "Valor"),
              caption = htmltools::tags$caption(input$indicador_CDE_estr,
                                                style = "color:black; font-size:110%;"))
      
    } else if(input$indicador_CDE_estr == "Índice de diversificación de las exportaciones según UNCTAD"){ 

      DT::datatable(CDE_estr_2(),
                rownames = FALSE,
                colnames = c("Fecha", "Valor"),
                caption = htmltools::tags$caption(input$indicador_CDE_estr,
                                                  style = "color:black; font-size:110%;")) %>% 
        formatCurrency(2, '', mark = ",")
      
    } else if(input$indicador_CDE_estr %in% list_CDE_estr_2) {

      DT::datatable(CDE_estr_3(),
                rownames = FALSE,
                # colnames = c("Fecha", "Sector", "Valor"),
                caption = htmltools::tags$caption(input$indicador_CDE_estr,
                                                  style = "color:black; font-size:110%;")) %>% 
        formatCurrency(2:4, '', mark = ",")
      
    }
  })
  
  # Descarga tabla
  output$dl_tabla_CDE_estr <- downloadHandler(
    
    filename = function() {
      paste("resultados-", input$indicador_CDE_estr, ".xlsx", sep = "")
    },
    content = function(file) {
      
      if(input$indicador_CDE_estr %in% lista_CDE_estr_barras){ 
        
      openxlsx::write.xlsx(list_df_CDE_estr1(), file)
      
      } else if(input$indicador_CDE_estr == "Índice de diversificación de las exportaciones según UNCTAD"){ 

        openxlsx::write.xlsx(list_df_CDE_estr2(), file)
        
      } else if(input$indicador_CDE_estr %in% list_CDE_estr_2) {

        openxlsx::write.xlsx(list_df_CDE_estr3(), file)
        
      }
    }
  )
  
  
  # ##  8.  Desarrollo económico (CDE_de)  =====================================
  # 
  # # Data CP_precios 
  # CDE_de <- reactive({
  #   
  #   req(input$fecha_CDE_de, input$indicador_CDE_de)
  #   validate(need(input$fecha_CDE_de[2] > input$fecha_CDE_de[1], 
  #                 "Error: la fecha de comienzo es posterior a la de final"))
  #   
  #   d_CDE_de %>%
  #     filter(NOMINDICADOR == input$indicador_CDE_de,
  #            fecha > as.POSIXct(input$fecha_CDE_de[1] - 6) &
  #              fecha < as.POSIXct(input$fecha_CDE_de[2])) 
  #   
  # })
  # 
  # # Info: forma de CALCULO
  # output$info_CDE_de <- renderUI({ 
  #   helpText(HTML(paste("<b>Forma de cálculo:</b>", 
  #                       unique(CDE_de()$`FORMA DE CALCULO`),
  #                       referencias)))
  # })
  # 
  # # Relevancia:
  # output$rel_CDE_de <- renderUI({ 
  #   helpText(HTML(paste("<b>Relvancia:</b>", unique(CDE_de()$RELEVANCIA))))
  # })
  # 
  # # Title
  # output$title_CDE_de <- renderUI({ 
  #   helpText(HTML(unique(CDE_de()$NOMINDICADOR)))
  # })
  # 
  # # Subtitle
  # output$subtitle_CDE_de <- renderUI({ 
  #   helpText(HTML(unique(CDE_de()$DEFINICION)))
  # })
  # 
  # 
  # 
  # # Gráficos CDE_de
  # output$p_CDE_de <- renderPlot({
  #   
  #   req(input$fecha_CDE_de, input$indicador_CDE_de)
  # 
  #   plot_CDE_de  <- ggplot(data = CDE_de() %>% 
  #                              filter(sector != "Total"),
  #                            aes(x = fecha, y = VALOR, fill = sector)) +
  #     geom_col(color = "black", alpha = .8) +
  #     theme(axis.text.x = element_text(angle = 0),
  #           legend.position = "bottom") +
  #     labs(x = "",
  #          y = "",
  #          title = input$indicador_CDE_de,
  #          caption = wrapit(paste("Fuente: Unidad de Métodos y Acceso a Datos (FCS - UdelaR) en base a datos de", 
  #                                 unique(CDE_de()$FUENTE)))) +
  #     scale_y_continuous(labels = addUnits) +
  #     scale_fill_brewer(name = "Sector", palette = "Blues")
  #   
  #   
  #   print(plot_CDE_de)
  #   ggsave("www/indicador productividad.png", width = 30, height = 20, units = "cm")
  #   
  # })
  # 
  # # Botón descarga
  # output$baja_p_CDE_de <- downloadHandler(
  #   filename <- function() {
  #     paste("indicador productividad", "png", sep = ".")
  #   },
  #   
  #   content <- function(file) {
  #     file.copy("www/indicador productividad.png", file)
  #   },
  #   contentType = "www/indicador productividad"
  # )
  # 
  # # Data para tabla y exportar 
  # CDE_de_1 <- reactive({
  #   
  #   CDE_de() %>%
  #     mutate(fecha = format(fecha, format = "%Y")) %>% 
  #     select(fecha, sector, VALOR_ORIGINAL) %>%
  #     arrange(desc(fecha, fct_reorder(sector, -VALOR_ORIGINAL)))
  #   
  # })
  # 
  # # Data completa 
  # CDE_de_1_c <- reactive({
  #   d_CDE_de %>%
  #     filter(NOMINDICADOR == input$indicador_CDE_de) %>%
  #     mutate(fecha = format(fecha, format = "%Y")) %>% 
  #     select(fecha, sector, VALOR_ORIGINAL) %>%
  #     arrange(desc(fecha, fct_reorder(sector, -VALOR_ORIGINAL)))
  # })
  # 
  # # Metadata 
  # CDE_de_b <- reactive({
  #   CDE_de() %>%
  #     select(NOMINDICADOR, FUENTE, DEFINICION, `FORMA DE CALCULO`, RELEVANCIA) %>% 
  #     mutate(`Unidad de Métodos y Acceso a Datos (FCS -UdelaR)` = " ") %>% 
  #     distinct() %>% 
  #     gather(key = "", value = " ")
  #   
  # })
  # 
  # list_df_CDE_de1 <- reactive({
  #   list_df_CDE_de1 <- list("Data" = CDE_de_1(),
  #                           "Metadata" = CDE_de_b(),
  #                           "Data completa" = CDE_de_1_c())
  # })
  # 
  # # Tablas
  # output$tab_CDE_de <- renderDT({
  #   
  #   DT::datatable(CDE_de_1(),
  #             rownames = FALSE,
  #             colnames = c("Fecha", "Sector", "Valor"),
  #             caption = htmltools::tags$caption(input$indicador_CDE_de,
  #                                               style = "color:black; font-size:110%;")) %>% 
  #     formatCurrency(2, '', mark = ",")
  #   
  # })
  # 
  # # Descarga tabla
  # output$dl_tabla_CDE_de <- downloadHandler(
  #   
  #   filename = function() {
  #     paste("resultados-", input$indicador_CDE_de, ".xlsx", sep = "")
  #   },
  #   content = function(file) {
  #     
  #     openxlsx::write.xlsx(list_df_CDE_de1(), file)
  #     
  #   }
  # )
  
  ##  9.  INVERSIÓN (CDE_inv)   ============================================
  
  # Data CDE_inv 
  CDE_inv_raw <- reactive({
    
    req(input$indicador_CDE_inv)

    d_CDE_inv %>%
      filter(NOMINDICADOR == input$indicador_CDE_inv) 
    
  })
  
  output$selector_CDE_inv_fecha <- renderUI({
    
    tagList(
      tags$style(type = 'text/css', 
                 '#big_slider .irs-grid-text {font-size: 12px; transform: rotate(-90deg) translate(-10px);} ,.irs-grid-pol.large {height: 0px;}'),
      div(id = 'big_slider',
          
    sliderInput("fecha_CDE_inv", 
                label = "Rango de tiempo", 
                sep = "",
                dragRange = T,
                min = min(CDE_inv_raw()$fecha_num), 
                max = max(CDE_inv_raw()$fecha_num), 
                value = c(min(CDE_inv_raw()$fecha_num), 
                          max(CDE_inv_raw()$fecha_num))
    )))
    
  })
  
  
  CDE_inv <- reactive({
    
    req(input$fecha_CDE_inv)
    
    CDE_inv_raw() %>%
      filter(fecha_num >= input$fecha_CDE_inv[1] &
               fecha_num <= input$fecha_CDE_inv[2])
    
  })
  
  
  # Info: forma de CALCULO
  output$info_CDE_inv <- renderUI({ 
    helpText(HTML(paste("<b>Forma de cálculo:</b>", 
                        unique(CDE_inv()$`FORMA DE CALCULO`),
                        referencias)))
  })
  
  # Relevancia:
  output$rel_CDE_inv <- renderUI({ 
    helpText(HTML(paste("<b>Relvancia:</b>", unique(CDE_inv()$RELEVANCIA))))
  })
  
  # Title
  output$title_CDE_inv <- renderUI({ 
    helpText(HTML(unique(CDE_inv()$NOMINDICADOR)))
  })
  
  # Subtitle
  output$subtitle_CDE_inv <- renderUI({ 
    helpText(HTML(unique(CDE_inv()$DEFINICION)))
  })
  
  # Actualización
  output$actualizacion_CDE_inv <- renderUI({ 
    helpText(HTML(paste("<b>Última actualización:</b>", unique(CDE_inv()$ACTUALIZACION))))
  })
  
  ## Selectores ractivos
  output$selector_CDE_inv <- renderUI({
    
    if(input$indicador_CDE_inv %in% lista_inst) {
      
      selectInput(
        inputId = "CDE_inv_inst",
        label = "Seleccione sector institucional:",
        choices = d_CDE_inv %>% 
          select(sec_inst) %>%
          drop_na() %>% 
          unique() %>% 
          pull()
      )
      
    } else if(input$indicador_CDE_inv %in% lista_rec){ 
      
      selectInput(
        inputId = "CDE_inv_rec",
        label = "Seleccione sector receptor de la IED:",
        choices = d_CDE_inv %>% 
          select(sec_rec) %>%
          drop_na() %>% 
          unique() %>% 
          pull()
      )
      
    } else {
      return(NULL)
    }
  }) 
  
  output$chbox_CDE_inv <- renderUI({
    
    if(input$indicador_CDE_inv %notin% lista_simple) {
      
      req(input$indicador_CDE_inv)
      
      checkboxGroupInput(
        inputId = "chbox_filtro_CDE_inv",
        label = "Seleccione categorias",
        inline = TRUE,
        choices = CDE_inv() %>% 
          filter(NOMINDICADOR == input$indicador_CDE_inv) %>% 
          distinct(filtro) %>%
          pull(),
        selected = CDE_inv() %>% 
          filter(JERARQUIA == 1) %>% 
          filter(NOMINDICADOR == input$indicador_CDE_inv) %>% 
          distinct(filtro) %>%
          pull()
      )
      
    } else {
      
      NULL
    }
    
  })    
  
  
  # Gráficos CDE_inv
  output$p_CDE_inv <- renderPlot({
    
    req(input$fecha_CDE_inv, input$indicador_CDE_inv, input$indicador_CDE_inv)
    
    if(input$indicador_CDE_inv %in% lista_rec) {
      
      req(input$CDE_inv_rec)
      
      base_plot_CDE_inv <-  CDE_inv() %>% 
        filter(sec_rec == input$CDE_inv_rec) 
      
      validate(need(nrow(base_plot_CDE_inv) > 0,
                    'No hay datos disponible para esta búsqueda'))

      plot_CDE_inv <- ggplot(data =  base_plot_CDE_inv %>% 
                                filter(filtro %in% input$chbox_filtro_CDE_inv),
                              aes(x = fecha, y = VALOR, color = filtro)) +
        geom_line(size = 1, alpha = 0.5) +
        geom_point(size = 3) +
        theme(axis.text.x = element_text(angle = 0),
              legend.position = "bottom") +
        labs(x = "",
             y = "",
             title = input$indicador_CDE_inv,
             caption = wrapit(paste("Fuente: Unidad de Métodos y Acceso a Datos (FCS - UdelaR) en base a datos de",
                                    unique(CDE_inv()$FUENTE)))) +
        scale_y_continuous(labels = addUnits) +
        scale_color_viridis(name = " ", discrete = T, direction = 1)
      
      print(plot_CDE_inv)
      ggsave("www/indicador inversion.png", width = 30, height = 20, units = "cm")
      
      
    } else if(input$indicador_CDE_inv %in% lista_inst){ 
      
      req(input$CDE_inv_inst, input$indicador_CDE_inv)
      
      base_plot_CDE_inv <-  CDE_inv() %>% 
        filter(sec_inst == input$CDE_inv_inst) 
      
      validate(need(nrow(base_plot_CDE_inv) > 0, 
                    'No hay datos disponible para esta búsqueda'))
      
      
      plot_CDE_inv <- ggplot(data =  base_plot_CDE_inv %>% 
                               filter(filtro %in% input$chbox_filtro_CDE_inv),
                             aes(x = fecha, y = VALOR, color = filtro)) +
        geom_line(size = 1, alpha = 0.5) +
        geom_point(size = 3) +
        theme(axis.text.x = element_text(angle = 0),
              legend.position = "bottom") +
        labs(x = "",
             y = "",
             title = input$indicador_CDE_inv,
             caption = wrapit(paste("Fuente: Unidad de Métodos y Acceso a Datos (FCS - UdelaR) en base a datos de",
                                    unique(CDE_inv()$FUENTE)))) +
        scale_y_continuous(labels = addUnits) +
        scale_color_viridis(name = " ", discrete = T, direction = 1)
      
      print(plot_CDE_inv)
      ggsave("www/indicador inversion.png", width = 30, height = 20, units = "cm")
      
      
      
      # plot_CDE_inv <- ggplot(data =  base_plot_CDE_inv, 
      #                        aes(x = fecha, y = VALOR, fill = comp_inv)) +
      #   geom_col(color = "black", alpha = .8) +
      #   theme(axis.text.x = element_text(angle = 0),
      #         legend.position = "bottom") +
      #   labs(x = "",
      #        y = "",
      #        title = input$indicador_CDE_inv,
      #        subtitle = paste("Sector institucional:", input$CDE_inv_inst, sep = " "),
      #        caption = wrapit(paste("Fuente: Unidad de Métodos y Acceso a Datos (FCS - UdelaR) en base a datos de",
      #                               unique(CDE_inv()$FUENTE)))) +
      #   scale_color_brewer(name = "Sector", palette = "Paired") +
      #   scale_y_continuous(labels = addUnits) +
      #   scale_fill_brewer(name = "Componente de la IED", palette = "Blues") 
      # 
      # print(plot_CDE_inv)
      # ggsave("www/indicador inversion.png", width = 30, height = 20, units = "cm")
      
    } else if(input$indicador_CDE_inv %in% lista_simple){ 
     
      req(input$fecha_CDE_inv, input$indicador_CDE_inv)
      
      plot_CDE_inv <- ggplot(data =  CDE_inv(), aes(x = fecha, y = VALOR)) +
        geom_line(size = 1, color = "#476481", alpha = 0.5) +
        geom_point(size = 3, color = "#476481") +
        theme(axis.text.x = element_text(angle = 0),
              legend.position = "none") +
        labs(x = "",
             y = "",
             title = input$indicador_CDE_inv,
             caption = wrapit(paste("Fuente: Unidad de Métodos y Acceso a Datos (FCS - UdelaR) en base a datos de",
                                    unique(CDE_inv()$FUENTE)))) +
        scale_y_continuous(labels = addUnits)
      
      print(plot_CDE_inv)
      ggsave("www/indicador inversion.png", width = 30, height = 20, units = "cm")
    }
    
  })
  
  #Segundo gráfico
  output$p_CDE_inv_2 <- renderPlot({
    
  if(input$indicador_CDE_inv %in% lista_inst){ 
    
    req(input$CDE_inv_inst, input$indicador_CDE_inv)
    
    base_plot_CDE_inv <-  CDE_inv() %>% 
      filter(sec_inst == input$CDE_inv_inst) %>% 
      filter(comp_inv != "TOTAL")
    
    validate(need(nrow(base_plot_CDE_inv) > 0, 
                  'No hay datos disponible para esta búsqueda'))
    
    plot_CDE_inv <- ggplot(data =  base_plot_CDE_inv, 
                           aes(x = fecha, y = VALOR, fill = comp_inv)) +
      geom_col(color = "black", alpha = .8) +
      theme(axis.text.x = element_text(angle = 0),
            legend.position = "bottom") +
      labs(x = "",
           y = "",
           title = input$indicador_CDE_inv,
           subtitle = paste("Sector institucional:", input$CDE_inv_inst, sep = " "),
           caption = wrapit(paste("Fuente: Unidad de Métodos y Acceso a Datos (FCS - UdelaR) en base a datos de",
                                  unique(CDE_inv()$FUENTE)))) +
      scale_color_brewer(name = "Sector", palette = "Paired") +
      scale_y_continuous(labels = addUnits) +
      scale_fill_brewer(name = "Componente de la IED", palette = "Blues") 
    
    print(plot_CDE_inv)
    ggsave("www/indicador inversion2.png", width = 30, height = 20, units = "cm")
    
  } else if(input$indicador_CDE_inv %in% lista_rec){ 
    
    req(input$CDE_inv_rec, input$indicador_CDE_inv)
    
    base_plot_CDE_inv <-  CDE_inv() %>% 
      filter(sec_rec == input$CDE_inv_rec) %>% 
      filter(comp_ied != "TOTAL")
    
    validate(need(nrow(base_plot_CDE_inv) > 0, 
                  'No hay datos disponible para esta búsqueda'))
    
    plot_CDE_inv <- ggplot(data =  base_plot_CDE_inv, 
                           aes(x = fecha, y = VALOR, fill = comp_ied)) +
      geom_col(color = "black", alpha = .8) +
      theme(axis.text.x = element_text(angle = 0),
            legend.position = "bottom") +
      labs(x = "",
           y = "",
           title = input$indicador_CDE_inv,
           subtitle = paste("Sector institucional:", input$CDE_inv_inst, sep = " "),
           caption = wrapit(paste("Fuente: Unidad de Métodos y Acceso a Datos (FCS - UdelaR) en base a datos de",
                                  unique(CDE_inv()$FUENTE)))) +
      scale_color_brewer(name = "Sector", palette = "Paired") +
      scale_y_continuous(labels = addUnits) +
      scale_fill_brewer(name = "Sector recipiente de la IED", palette = "Blues") 
    
    print(plot_CDE_inv)
    ggsave("www/indicador inversion2.png", width = 30, height = 20, units = "cm")
    
  }
  
    
  })
  
  
  output$p_CDE_inv_2out <- renderUI({
    
    if(input$indicador_CDE_inv %in% c(lista_inst, lista_rec)) {
      
      plotOutput("p_CDE_inv_2")
      
    } else {
      
      NULL
    }
  })
  
  
  # Botón descarga gráfico
  output$baja_p_CDE_inv <- downloadHandler(
    filename <- function() {
      paste("indicador inversion", "png", sep = ".")
    },
    
    content <- function(file) {
      file.copy("www/indicador inversion.png", file)
    },
    contentType = "www/indicador inversion"
  )
  
  
  # Botón descarga gráfico
  output$baja_p_CDE_inv_ag <- downloadHandler(
    filename <- function() {
      paste("indicador inversion2", "png", sep = ".")
    },
    
    content <- function(file) {
      file.copy("www/indicador inversion2.png", file)
    },
    contentType = "www/indicador inversion2"
  )
  
  

  # Data para tabla y exportar 
  CDE_inv_1 <- reactive({
    
    req(input$CDE_inv_rec)
    
    CDE_inv() %>%
      filter(sec_rec == input$CDE_inv_rec) %>% 
      mutate(fecha = format(fecha, format = "%Y")) %>%
      select(fecha, sec_rec, comp_ied, VALOR_ORIGINAL) %>%
      arrange(desc(fecha, VALOR_ORIGINAL)) %>% 
      pivot_wider(names_from = comp_ied,
                  values_from = VALOR_ORIGINAL)
    
  })
  
  CDE_inv_2 <- reactive({
    
    req(input$CDE_inv_inst)
    
    CDE_inv() %>%
      filter(sec_inst == input$CDE_inv_inst) %>% 
      mutate(fecha = format(fecha, format = "%Y")) %>%
      select(fecha, sec_inst, comp_inv, VALOR_ORIGINAL) %>%
      arrange(desc(fecha, VALOR_ORIGINAL)) %>% 
      pivot_wider(names_from = comp_inv,
                  values_from = VALOR_ORIGINAL)
    
  })
  
  
  CDE_inv_3 <- reactive({

    CDE_inv() %>%
      mutate(fecha = format(fecha, format = "%Y")) %>% 
      select(fecha, VALOR_ORIGINAL) %>%
      arrange(desc(fecha))
    
  })
  
  # Data completa 
  CDE_inv_1_c <- reactive({
    d_CDE_inv %>%
      filter(NOMINDICADOR == input$indicador_CDE_inv) %>%   
      # filter(sec_rec == input$CDE_inv_rec) %>%
      mutate(fecha = format(fecha, format = "%Y")) %>%
      select(fecha, sec_rec, comp_ied, VALOR_ORIGINAL) %>%
      arrange(desc(fecha, VALOR_ORIGINAL)) %>% 
      pivot_wider(names_from = comp_ied,
                  values_from = VALOR_ORIGINAL)
  })
  
  CDE_inv_2_c <- reactive({
    d_CDE_inv %>%
      filter(NOMINDICADOR == input$indicador_CDE_inv) %>%
      # filter(sec_inst == input$CDE_inv_inst) %>% 
      mutate(fecha = format(fecha, format = "%Y")) %>%
      select(fecha, sec_inst, comp_inv, VALOR_ORIGINAL) %>%
      arrange(desc(fecha, VALOR_ORIGINAL)) %>% 
      pivot_wider(names_from = comp_inv,
                  values_from = VALOR_ORIGINAL)
    
  })

  CDE_inv_3_c <- reactive({
    d_CDE_inv %>%
      filter(NOMINDICADOR == input$indicador_CDE_inv) %>%
      mutate(fecha = format(fecha, format = "%Y")) %>% 
      select(fecha, VALOR_ORIGINAL) %>%
      arrange(desc(fecha))
  })
  
  
  # Metadata 
  CDE_inv_b <- reactive({
    CDE_inv() %>%
      select(NOMINDICADOR, FUENTE, DEFINICION, `FORMA DE CALCULO`, RELEVANCIA) %>% 
      mutate(`Unidad de Métodos y Acceso a Datos (FCS -UdelaR)` = " ") %>% 
      distinct() %>% 
      gather(key = "", value = " ")
    
  })
  
  list_df_CDE_inv1 <- reactive({
    list_df_CDE_inv1 <- list("Data" = CDE_inv_1(), 
                             "Metadata" = CDE_inv_b(),
                             "Data completa" = CDE_inv_1_c())
  })
  
  list_df_CDE_inv2 <- reactive({
    list_df_CDE_inv2 <- list("Data" = CDE_inv_2(),
                             "Metadata" = CDE_inv_b(),
                             "Data completa" = CDE_inv_2_c())
  })
  
  list_df_CDE_inv3 <- reactive({
    list_df_CDE_inv1 <- list("Data" = CDE_inv_3(),
                             "Metadata" = CDE_inv_b(),
                             "Data completa" = CDE_inv_3_c())
  })
  
  # Tablas en shiny
  output$tab_CDE_inv <- renderDT({
    
    if(input$indicador_CDE_inv %in% lista_rec) {
      
      DT::datatable(CDE_inv_1(), 
                rownames = FALSE,
                # colnames = c("Fecha", "Sector Institucional", "Componente de la Inversión", "Valor"),
                caption = htmltools::tags$caption(input$indicador_CDE_inv,
                                                  style = "color:black; font-size:110%;")) %>% 
        formatCurrency(4, '', mark = ",")
      
    } else if(input$indicador_CDE_inv %in% lista_inst){ 
      
      DT::datatable(CDE_inv_2(), 
                rownames = FALSE,
                # colnames = c("Fecha", "Sector Receptor de la IED", "Componente de IED", "Valor"),
                caption = htmltools::tags$caption(input$indicador_CDE_inv,
                                                  style = "color:black; font-size:110%;")) %>% 
        formatCurrency(4, '', mark = ",")
      
    } else if(input$indicador_CDE_inv %in% lista_simple){ 
    
      DT::datatable(CDE_inv_3(), 
                rownames = FALSE,
                colnames = c("Fecha", "Valor"),
                caption = htmltools::tags$caption(input$indicador_CDE_inv,
                                                  style = "color:black; font-size:110%;")) %>% 
        formatCurrency(2, '', mark = ",")
      
    }
    
  })
  
  
  # Descarga tabla
  output$dl_tabla_CDE_inv <- downloadHandler(
    
    filename = function() {
      paste("resultados-", input$indicador_CDE_inv, ".xlsx", sep = "")
    },
    content = function(file) {
      
      if(input$indicador_CDE_inv %in% lista_rec) {
        
        openxlsx::write.xlsx(list_df_CDE_inv1(), file)
        
      } else if(input$indicador_CDE_inv %in% lista_inst){ 
        
        openxlsx::write.xlsx(list_df_CDE_inv2(), file) 
        
      } else if(input$indicador_CDE_inv %in% lista_simple){ 
        
        openxlsx::write.xlsx(list_df_CDE_inv3(), file) 
        
      }
    }
  )
  
  
  ##  10.  CTI (CDE_cti)  ==================================================
  
  # Data CDE_cti 
  CDE_cti_raw <- reactive({
    
    req(input$indicador_CDE_cti)

    d_CDE_cti %>%
      filter(NOMINDICADOR == input$indicador_CDE_cti)
    
  })
  
  
  output$selector_CDE_cti_fecha <- renderUI({
    
    tagList(
      tags$style(type = 'text/css', 
                 '#big_slider .irs-grid-text {font-size: 12px; transform: rotate(-90deg) translate(-10px);} ,.irs-grid-pol.large {height: 0px;}'),
      div(id = 'big_slider',
          
    sliderInput("fecha_CDE_cti", 
                label = "Rango de tiempo", 
                sep = "",
                dragRange = T,
                min = min(CDE_cti_raw()$fecha_num), 
                max = max(CDE_cti_raw()$fecha_num), 
                value = c(min(CDE_cti_raw()$fecha_num), 
                          max(CDE_cti_raw()$fecha_num))
    )))
    
  })
  
  CDE_cti <- reactive({
    
    req(input$fecha_CDE_cti)
    
    CDE_cti_raw() %>%
      filter(fecha_num >= input$fecha_CDE_cti[1] &
               fecha_num <= input$fecha_CDE_cti[2])
    
  })
  
  
  output$chbox_CDE_cti <- renderUI({
    
    if(input$indicador_CDE_cti == "Gasto en educación por nivel (% gasto total en educación) según WDI") {
      
      req(input$indicador_CDE_cti)
      
      checkboxGroupInput(
        inputId = "chbox_filtro_cti",
        label = "Seleccione categorias",
        inline = TRUE,
        choices = CDE_cti() %>% 
          distinct(filtro) %>%
          pull(),
        selected = CDE_cti() %>% 
          filter(JERARQUIA == 1) %>% 
          distinct(filtro) %>%
          pull()
      )
      
    } else {
      
      NULL
    }
    
  })    
  
  # Info: forma de CALCULO
  output$info_CDE_cti <- renderUI({ 
    helpText(HTML(paste("<b>Forma de cálculo:</b>", 
                        unique(CDE_cti()$`FORMA DE CALCULO`),
                        referencias)))
  })
  
  # Relevancia:
  output$rel_CDE_cti <- renderUI({ 
    helpText(HTML(paste("<b>Relvancia:</b>", unique(CDE_cti()$RELEVANCIA))))
  })
  
  # Title
  output$title_CDE_cti <- renderUI({ 
    helpText(HTML(unique(CDE_cti()$NOMINDICADOR)))
  })
  
  # Subtitle
  output$subtitle_CDE_cti <- renderUI({ 
    helpText(HTML(unique(CDE_cti()$DEFINICION)))
  })
  
  # Actualización
  output$actualizacion_CDE_cti <- renderUI({ 
    helpText(HTML(paste("<b>Última actualización:</b>", unique(CDE_cti()$ACTUALIZACION))))
  })
  
  # Gráficos CDE_cti
  output$p_CDE_cti <- renderPlot({
    
    if(input$indicador_CDE_cti  != "Gasto en educación por nivel (% gasto total en educación) según WDI") {
      
    req(input$fecha_CDE_cti, input$indicador_CDE_cti)
    
    plot_CDE_cti <- ggplot(data =  CDE_cti(), aes(x = fecha, y = VALOR)) +
      geom_line(size = 1, color = "#476481", alpha = 0.5) +
      geom_point(size = 3, color = "#476481") +
      theme(axis.text.x = element_text(angle = 0),
            legend.position = "none") +
      labs(x = "",
           y = "",
           title = input$indicador_CDE_cti,
           caption = wrapit(paste("Fuente: Unidad de Métodos y Acceso a Datos (FCS - UdelaR) en base a datos de",
                                  unique(CDE_cti()$FUENTE)))) +
      scale_y_continuous(labels = addUnits)
    
    print(plot_CDE_cti)
    ggsave("www/indicador cti.png", width = 30, height = 20, units = "cm")
    
  } else if(input$indicador_CDE_cti == "Gasto en educación por nivel (% gasto total en educación) según WDI"){ 
    
    req(input$fecha_CDE_cti, input$indicador_CDE_cti)
    
    validate(need(nrow(CDE_cti()) > 0, 'No hay datos disponible para esta búsqueda'))
    
    plot_CDE_cti <- ggplot(data =  CDE_cti() %>% 
                            filter(filtro %in% input$chbox_filtro_cti),
                          aes(x = fecha, y = VALOR, color = filtro)) +
      geom_line(size = 1, alpha = 0.5) +
      geom_point(size = 3) +
      theme(axis.text.x = element_text(angle = 0),
            legend.position = "bottom") +
      labs(x = "",
           y = "",
           title = input$indicador_CDE_cti,
           caption = wrapit(paste("Fuente: Unidad de Métodos y Acceso a Datos (FCS - UdelaR) en base a datos de",
                                  unique(CDE_cti()$FUENTE)))) +
      scale_y_continuous(labels = addUnits) +
      scale_color_viridis(name = " ", discrete = T, direction = 1)

    print(plot_CDE_cti)
    ggsave("www/indicador cti.png", width = 30, height = 20, units = "cm")
  }
  
    
  })
  
  
  # Botón descarga gráfico
  output$baja_p_CDE_cti <- downloadHandler(
    filename <- function() {
      paste("indicador cti", "png", sep = ".")
    },
    
    content <- function(file) {
      file.copy("www/indicador cti.png", file)
    },
    contentType = "www/indicador cti"
  )
  
  # Data para tabla y exportar 
  CDE_cti_1 <- reactive({
    
    CDE_cti() %>%
      mutate(fecha = format(fecha, format = "%Y")) %>% 
      select(fecha, VALOR_ORIGINAL) %>%
      arrange(desc(fecha))
    
  })
  
  CDE_cti_2 <- reactive({
    
    CDE_cti() %>%
      mutate(fecha = format(fecha, format = "%Y")) %>%
      select(fecha, nivel_edu, VALOR_ORIGINAL) %>%
      arrange(desc(fecha, fct_reorder(nivel_edu, -VALOR_ORIGINAL))) %>% 
      pivot_wider(names_from = nivel_edu,
                  values_from = VALOR_ORIGINAL)
    
  })
  
  # Data completa 
  CDE_cti_1_c <- reactive({
    d_CDE_cti %>%
      mutate(fecha = format(fecha, format = "%Y")) %>%
      filter(NOMINDICADOR == input$indicador_CDE_cti) %>% 
      select(fecha, VALOR_ORIGINAL) %>%
      arrange(desc(fecha))
  })
  
  
  CDE_cti_2_c <- reactive({
    d_CDE_cti %>%
      mutate(fecha = format(fecha, format = "%Y")) %>%
      filter(NOMINDICADOR == input$indicador_CDE_cti) %>% 
      select(fecha, nivel_edu, VALOR_ORIGINAL) %>%
      arrange(fecha, fct_reorder(nivel_edu, -VALOR_ORIGINAL)) %>% 
      pivot_wider(names_from = nivel_edu,
                  values_from = VALOR_ORIGINAL) 
  })
  
  # Metadata 
  CDE_cti_b <- reactive({
    CDE_cti() %>%
      select(NOMINDICADOR, FUENTE, DEFINICION, `FORMA DE CALCULO`, RELEVANCIA) %>% 
      mutate(`Unidad de Métodos y Acceso a Datos (FCS -UdelaR)` = " ") %>% 
      distinct() %>% 
      gather(key = "", value = " ")
    
  })
  
  list_df_CDE_cti1 <- reactive({
    list_df_CDE_cti1 <- list("Data" = CDE_cti_1(),
                             "Metadata" = CDE_cti_b(),
                             "Data completa" = CDE_cti_1_c())
  })
  
  
  list_df_CDE_cti2 <- reactive({
    list_df_CDE_cti2 <- list("Data" = CDE_cti_2(),
                            "Metadata" = CDE_cti_b(),
                            "Data completa" = CDE_cti_2_c())
  })
  
  # Tablas en shiny
  output$tab_CDE_cti <- renderDT({
    
    if(input$indicador_CDE_cti != "Gasto en educación por nivel (% gasto total en educación) según WDI") {
      
      DT::datatable(CDE_cti_1(), 
                    rownames = FALSE,
                    colnames = c("Fecha", "Valor"),
                    caption = htmltools::tags$caption(input$indicador_CDE_cti,
                                                      style = "color:black; font-size:110%;")) %>% 
        formatCurrency(2, '', mark = ",")
      
      
    } else if(input$indicador_CDE_cti == "Gasto en educación por nivel (% gasto total en educación) según WDI"){ 
      
      DT::datatable(CDE_cti_2(), 
                    rownames = FALSE,
                    # colnames = c("Fecha", "Nivel educativo", "Valor"),
                    caption = htmltools::tags$caption(input$indicador_CDE_cti,
                                                      style = "color:black; font-size:110%;")) %>% 
        formatCurrency(2:4, '', mark = ",")
    }
    
  })
  
  
  # Descarga tabla
  output$dl_tabla_CDE_cti <- downloadHandler(
    
    filename = function() {
      paste("resultados-", input$indicador_CDE_cti, ".xlsx", sep = "")
    },
    content = function(file) {
      
      if(input$indicador_CDE_cti != "Gasto en educación por nivel (% gasto total en educación) según WDI") {
        
        openxlsx::write.xlsx(list_df_CDE_cti1(), file)
        
      } else if(input$indicador_CDE_cti == "Gasto en educación por nivel (% gasto total en educación) según WDI"){ 
        
        openxlsx::write.xlsx(list_df_CDE_cti2(), file) 
        
      }
    }
  )
  
  
  
  # # Tablas
  # output$tab_CDE_cti <- renderDT({
  #   
  #   DT::datatable(CDE_cti_1(),
  #             colnames = c("Fecha", "Valor"),
  #             rownames = FALSE,
  #             caption = htmltools::tags$caption(input$indicador_CDE_cti,
  #                                               style = "color:black; font-size:110%;")) %>% 
  #     formatCurrency(2, '', mark = ",")
  # })
  # 
  # # Descarga tabla
  # output$dl_tabla_CDE_cti <- downloadHandler(
  #   
  #   filename = function() {
  #     paste("resultados-", input$indicador_CDE_cti, ".xlsx", sep = "")
  #   },
  #   content = function(file) {
  #     
  #     openxlsx::write.xlsx(list_df_CDE_cti1(), file)
  #     
  #   }
  # )
  
  
  ##  11.  AMBIENTE (AMB_amb)   =============================================
  
  # Data AMB_amb 
  AMB_amb_raw <- reactive({
    
    req(input$indicador_AMB_amb)

    d_AMB_amb %>%
      filter(NOMINDICADOR == input$indicador_AMB_amb)
    
  })
  
  output$selector_AMB_amb_fecha <- renderUI({
    
    tagList(
      tags$style(type = 'text/css', 
                 '#big_slider .irs-grid-text {font-size: 12px; transform: rotate(-90deg) translate(-10px);} ,.irs-grid-pol.large {height: 0px;}'),
      div(id = 'big_slider',
          
    sliderInput("fecha_AMB_amb", 
                label = "Rango de tiempo", 
                sep = "",
                dragRange = T,
                min = min(AMB_amb_raw()$fecha_num), 
                max = max(AMB_amb_raw()$fecha_num), 
                value = c(min(AMB_amb_raw()$fecha_num), 
                          max(AMB_amb_raw()$fecha_num))
    )))
    
  })
  
  AMB_amb <- reactive({
    
    req(input$fecha_AMB_amb)
    
    AMB_amb_raw() %>%
      filter(fecha_num >= input$fecha_AMB_amb[1] &
               fecha_num <= input$fecha_AMB_amb[2])
    
  })
  
  
  # Info: forma de CALCULO
  output$info_AMB_amb <- renderUI({ 
    helpText(HTML(paste("<b>Forma de cálculo:</b>", 
                        unique(AMB_amb()$`FORMA DE CALCULO`),
                        referencias)))
  })
  
  # Relevancia:
  output$rel_AMB_amb <- renderUI({ 
    helpText(HTML(paste("<b>Relvancia:</b>", unique(AMB_amb()$RELEVANCIA))))
  })
  
  # Title
  output$title_AMB_amb <- renderUI({ 
    helpText(HTML(unique(AMB_amb()$NOMINDICADOR)))
  })
  
  # Subtitle
  output$subtitle_AMB_amb <- renderUI({ 
    helpText(HTML(unique(AMB_amb()$DEFINICION)))
  })
  
  # Actualización
  output$actualizacion_AMB_amb <- renderUI({ 
    helpText(HTML(paste("<b>Última actualización:</b>", unique(AMB_amb()$ACTUALIZACION))))
  })
  
  # Gráficos AMB_amb
  output$p_AMB_amb <- renderPlot({
    
    req(input$fecha_AMB_amb, input$indicador_AMB_amb)
    
    plot_AMB_amb <- ggplot(data =  AMB_amb(), aes(x = fecha, y = VALOR)) +
      geom_line(size = 1, color = "#476481", alpha = 0.5) +
      geom_point(size = 3, color = "#476481") +
      theme(axis.text.x = element_text(angle = 0),
            legend.position = "none") +
      labs(x = "",
           y = "",
           title = input$indicador_AMB_amb,
           caption = wrapit(paste("Fuente: Unidad de Métodos y Acceso a Datos (FCS - UdelaR) en base a datos de",
                                  unique(AMB_amb()$FUENTE)))) +
      scale_y_continuous(labels = addUnits)
    
    print(plot_AMB_amb)
    ggsave("www/indicador ambiente.png", width = 30, height = 20, units = "cm")
    
  })
  
  
  # Botón descarga gráfico
  output$baja_p_AMB_amb <- downloadHandler(
    filename <- function() {
      paste("indicador ambiente", "png", sep = ".")
    },
    
    content <- function(file) {
      file.copy("www/indicador ambiente.png", file)
    },
    contentType = "www/indicador ambiente"
  )
  
  # Data para tabla y exportar 
  AMB_amb_1 <- reactive({
    
    AMB_amb() %>%
      mutate(fecha = format(fecha, format = "%Y")) %>% 
      select(fecha, VALOR_ORIGINAL) %>%
      arrange(desc(fecha))
    
  })
  
  # Data completa 
  AMB_amb_1_c <- reactive({
    d_AMB_amb %>%
      mutate(fecha = format(fecha, format = "%Y")) %>%
      filter(NOMINDICADOR == input$indicador_AMB_amb) %>% 
      select(fecha, VALOR_ORIGINAL) %>%
      arrange(desc(fecha))
  })
  
  # Metadata 
  AMB_amb_b <- reactive({
    AMB_amb() %>%
      select(NOMINDICADOR, FUENTE, DEFINICION, `FORMA DE CALCULO`, RELEVANCIA) %>% 
      mutate(`Unidad de Métodos y Acceso a Datos (FCS -UdelaR)` = " ") %>% 
      distinct() %>% 
      gather(key = "", value = " ")
    
  })
  
  list_df_AMB_amb1 <- reactive({
    list_df_AMB_amb1 <- list("Data" = AMB_amb_1(),
                             "Metadata" = AMB_amb_b(),
                             "Data completa" = AMB_amb_1_c())
  })
  
  # Tablas
  output$tab_AMB_amb <- renderDT({
    
    DT::datatable(AMB_amb_1(),
              colnames = c("Fecha", "Valor"),
              rownames = FALSE,
              caption = htmltools::tags$caption(input$indicador_AMB_amb,
                                                style = "color:black; font-size:110%;")) %>% 
      formatCurrency(2, '', mark = ",")
    
  })
  
  # Descarga tabla
  output$dl_tabla_AMB_amb <- downloadHandler(
    
    filename = function() {
      paste("resultados-", input$indicador_AMB_amb, ".xlsx", sep = "")
    },
    content = function(file) {
      
      openxlsx::write.xlsx(list_df_AMB_amb1(), file)
      
    }
  )
  
  
  ##  12.  DEUDA (SP_deuda)   ===============================================
  
  # Data SP_deuda 
  SP_deuda_raw <- reactive({
    
    req(input$indicador_SP_deuda)

    d_SP_deuda %>%
      filter(NOMINDICADOR == input$indicador_SP_deuda)
    
  })
  
  output$selector_SP_deuda_fecha <- renderUI({
    
    tagList(
      tags$style(type = 'text/css', 
                 '#big_slider .irs-grid-text {font-size: 12px; transform: rotate(-90deg) translate(-10px);} ,.irs-grid-pol.large {height: 0px;}'),
      div(id = 'big_slider',
          
    sliderInput("fecha_SP_deuda", 
                label = "Rango de tiempo", 
                sep = "",
                dragRange = T,
                min = min(SP_deuda_raw()$fecha_num), 
                max = max(SP_deuda_raw()$fecha_num), 
                value = c(min(SP_deuda_raw()$fecha_num), 
                          max(SP_deuda_raw()$fecha_num))
    )))
    
  })
  
  SP_deuda <- reactive({
    
    req(input$fecha_SP_deuda)
    
    SP_deuda_raw() %>%
      filter(fecha_num >= input$fecha_SP_deuda[1] &
               fecha_num <= input$fecha_SP_deuda[2])
    
  })
  
  
  # Info: forma de CALCULO
  output$info_SP_deuda <- renderUI({ 
    helpText(HTML(paste("<b>Forma de cálculo:</b>", 
                        unique(SP_deuda()$`FORMA DE CALCULO`),
                        referencias)))
  })
  
  # Relevancia:
  output$rel_SP_deuda <- renderUI({ 
    helpText(HTML(paste("<b>Relvancia:</b>", unique(SP_deuda()$RELEVANCIA))))
  })
  
  # Title
  output$title_SP_deuda <- renderUI({ 
    helpText(HTML(unique(SP_deuda()$NOMINDICADOR)))
  })
  
  # Subtitle
  output$subtitle_SP_deuda <- renderUI({ 
    helpText(HTML(unique(SP_deuda()$DEFINICION)))
  })
  
  # Actualización
  output$actualizacion_SP_deuda <- renderUI({ 
    helpText(HTML(paste("<b>Última actualización:</b>", unique(SP_deuda()$ACTUALIZACION))))
  })

  output$chbox_SP_deuda <- renderUI({
    
    if(input$indicador_SP_deuda %in% lista_deuda) {
      
      req(input$indicador_SP_deuda)
      
      checkboxGroupInput(
        inputId = "chbox_filtro",
        label = "Seleccione categorias",
        inline = TRUE,
        choices = SP_deuda() %>% 
          distinct(filtro) %>%
          pull(),
        selected = SP_deuda() %>% 
          filter(JERARQUIA == 1) %>% 
          distinct(filtro) %>%
          pull()
      )
      
    } else {
      
      NULL
    }
    
    })    

  
  output$p_SP_deuda <- renderPlot({
    
    req(input$fecha_SP_deuda, input$indicador_SP_deuda)
    
    if(input$indicador_SP_deuda %in% lista_deuda) {
      
      validate(need(nrow(SP_deuda()) > 0, 'No hay datos disponible para esta búsqueda'))
      
      plot_SP_deuda <- ggplot(data =  SP_deuda() %>% 
                                filter(filtro %in% input$chbox_filtro),
                                aes(x = fecha, y = VALOR, color = filtro)) +
        geom_line(size = 1, alpha = 0.5) +
        geom_point(size = 3) +
        theme(axis.text.x = element_text(angle = 0),
              legend.position = "bottom") +
        labs(x = "",
             y = "",
             title = input$indicador_SP_deuda,
             caption = wrapit(paste("Fuente: Unidad de Métodos y Acceso a Datos (FCS - UdelaR) en base a datos de",
                                    unique(SP_deuda()$FUENTE)))) +
        scale_y_continuous(labels = addUnits) +
        scale_color_viridis(name = " ", discrete = T, direction = 1)
      
      print(plot_SP_deuda)
      ggsave("www/indicador deuda.png", width = 30, height = 20, units = "cm")
      
      
    } else if(input$indicador_SP_deuda %notin% lista_deuda){ 
      
      req(input$fecha_SP_deuda, input$indicador_SP_deuda)
      
      plot_SP_deuda <- ggplot(data =  SP_deuda(),
                              aes(x = fecha, y = VALOR)) +
        geom_line(size = 1, color = "#476481", alpha = 0.5) +
        geom_point(size = 3, color = "#476481") +
        theme(axis.text.x = element_text(angle = 0),
              legend.position = "none") +
        labs(x = "",
             y = "",
             title = input$indicador_SP_deuda,
             caption = wrapit(paste("Fuente: Unidad de Métodos y Acceso a Datos (FCS - UdelaR) en base a datos de",
                                    unique(SP_deuda()$FUENTE)))) +
        scale_y_continuous(labels = addUnits)
      
      print(plot_SP_deuda)
      ggsave("www/indicador deuda.png", width = 30, height = 20, units = "cm")
    }
    
  })
  
  
  #Segundo gráfico
  output$p_SP_deuda_2 <- renderPlot({
    
    req(input$fecha_SP_deuda, input$indicador_SP_deuda)
    
    if(input$indicador_SP_deuda %in% lista_deuda) {
      
      validate(need(nrow(SP_deuda()) > 0, 'No hay datos disponible para esta búsqueda'))
      
      plot_SP_deuda_2  <- ggplot(data = SP_deuda() %>% 
                                 filter(filtro != "Total",
                                        filtro != "TOTAL"),
                               aes(x = fecha, y = VALOR, fill = filtro)) +
        geom_col(color = "black", alpha = .8) +
        theme(axis.text.x = element_text(angle = 0),
              legend.position = "bottom") +
        labs(x = "",
             y = "",
             title = input$indicador_SP_deuda,
             caption = wrapit(paste("Fuente: Unidad de Métodos y Acceso a Datos (FCS - UdelaR) en base a datos de", 
                                    unique(SP_deuda()$FUENTE)))) +
        scale_y_continuous(labels = addUnits) +
        scale_fill_brewer(name = " ", palette = "Blues")
      
      print(plot_SP_deuda_2)
      ggsave("www/indicador deuda agregada.png", width = 30, height = 20, units = "cm")
      
      }
    
  })
  
  
  output$p_SP_deuda_2out <- renderUI({
    
    if(input$indicador_SP_deuda %in% lista_deuda) {
      
      plotOutput("p_SP_deuda_2")
      
    } else {
      
      NULL
    }
  })
  
  
  # Botón descarga gráfico
  output$baja_p_SP_deuda <- downloadHandler(
    filename <- function() {
      paste("indicador deuda", "png", sep = ".")
    },
    
    content <- function(file) {
      file.copy("www/indicador deuda.png", file)
    },
    contentType = "www/indicador deuda"
  )
  
  
  # Botón descarga gráfico
  output$baja_p_SP_deuda_ag <- downloadHandler(
    filename <- function() {
      paste("indicador deuda agregada", "png", sep = ".")
    },
    
    content <- function(file) {
      file.copy("www/indicador deuda agregada.png", file)
    },
    contentType = "www/indicador deuda agregada"
  )
  

  # Data para tabla y exportar 
  SP_deuda_1 <- reactive({
    
    SP_deuda() %>%
      mutate(fecha = format(fecha, format = "%Y")) %>%
      select(fecha, VALOR_ORIGINAL) %>%
      arrange(desc(fecha))
    
  })
  
  SP_deuda_2 <- reactive({
    
    SP_deuda() %>%
      mutate(fecha = format(fecha, format = "%Y")) %>%
      rename(categoria = filtro) %>% 
      select(fecha, categoria, VALOR_ORIGINAL) %>%
      arrange(desc(fecha, fct_reorder(categoria, -VALOR_ORIGINAL))) %>% 
      pivot_wider(names_from = categoria,
                  values_from = VALOR_ORIGINAL)
    
  })
  
  # Data completa
  SP_deuda_1_c <- reactive({
    d_SP_deuda %>%
      mutate(fecha = format(fecha, format = "%Y")) %>%
      filter(NOMINDICADOR == input$indicador_SP_deuda) %>% 
      select(fecha, VALOR_ORIGINAL) %>%
      arrange(desc(fecha)) 
    })
  

  SP_deuda_2_c <- reactive({
    d_SP_deuda %>%
      mutate(fecha = format(fecha, format = "%Y")) %>%
      filter(NOMINDICADOR == input$indicador_SP_deuda) %>% 
      rename(categoria = filtro) %>%
      select(fecha, categoria, VALOR_ORIGINAL) %>%
      arrange(fecha, fct_reorder(categoria, -VALOR_ORIGINAL))
  })

  # Metadata 
  SP_deuda_b <- reactive({
    SP_deuda() %>%
      select(NOMINDICADOR, FUENTE, DEFINICION, `FORMA DE CALCULO`, RELEVANCIA) %>% 
      mutate(`Unidad de Métodos y Acceso a Datos (FCS -UdelaR)` = " ") %>% 
      distinct() %>% 
      gather(key = "", value = " ")
    
  })
  
  list_df_SP_deuda2 <- reactive({
    list_df_SP_deuda2 <- list("Data" = SP_deuda_2(),
                              "Metadata" = SP_deuda_b(),
                              "Data completa" = SP_deuda_2_c())
  })
  
  list_df_SP_deuda1 <- reactive({
    list_df_SP_deuda1 <- list("Data" = SP_deuda_1(),
                              "Metadata" = SP_deuda_b(),
                              "Data completa" = SP_deuda_1_c())
  })
  
  # Tablas en shiny
  output$tab_SP_deuda <- renderDT({
    
    if(input$indicador_SP_deuda == "Saldo de deuda pública por tipo (% PIB) según Cepalstat") {
      
      DT::datatable(SP_deuda_2(), 
                    rownames = FALSE,
                    # colnames = c("Fecha", "Categoría", "Valor"),
                    caption = htmltools::tags$caption(input$indicador_SP_deuda,
                                                      style = "color:black; font-size:110%;")) %>% 
        formatCurrency(2:4, '', mark = ",")
      
    } else if(input$indicador_SP_deuda %in% lista_deuda){ 
      
      DT::datatable(SP_deuda_2(), 
                    rownames = FALSE,
                    # colnames = c("Fecha", "Categoría", "Valor"),
                    caption = htmltools::tags$caption(input$indicador_SP_deuda,
                                                      style = "color:black; font-size:110%;"))
      # %>%
      #   formatCurrency(2:8, '', interval=3, digits =0)
      
    } else if(input$indicador_SP_deuda == "Saldo de deuda pública del gobierno central (millones USD corrientes) según Cepalstat"){ 
      
      DT::datatable(SP_deuda_1(), 
                    rownames = FALSE,
                    colnames = c("Fecha", "Valor"),
                    caption = htmltools::tags$caption(input$indicador_SP_deuda,
                                                      style = "color:black; font-size:110%;")) 
      
    } else if(input$indicador_SP_deuda  %notin% lista_deuda){ 
      
      DT::datatable(SP_deuda_1(), 
                    rownames = FALSE,
                    colnames = c("Fecha", "Valor"),
                    caption = htmltools::tags$caption(input$indicador_SP_deuda,
                                                      style = "color:black; font-size:110%;")) %>% 
        formatCurrency(2, '', mark = ",")
      
          }
    
  })
  
  
  
  # Descarga tabla
  output$dl_tabla_SP_deuda <- downloadHandler(
    
    filename = function() {
      paste("resultados-", input$indicador_SP_deuda, ".xlsx", sep = "")
    },
    content = function(file) {
      
      if(input$indicador_SP_deuda %notin% lista_deuda) {
        
        openxlsx::write.xlsx(list_df_SP_deuda1(), file)
        
      } else if(input$indicador_SP_deuda %in% lista_deuda){ 
        
        openxlsx::write.xlsx(list_df_SP_deuda2(), file) 
        
        
      }
    }
  )
  
  ##  13.  EMPLEO (SP_empleo)   ============================================
  
  # Data SP_empleo 
  SP_empleo_raw <- reactive({
    
    req(input$indicador_SP_empleo)

    d_SP_empleo %>%
      filter(NOMINDICADOR == input$indicador_SP_empleo)
    
  })
  
  output$selector_SP_empleo_fecha <- renderUI({
    
    tagList(
      tags$style(type = 'text/css', 
                 '#big_slider .irs-grid-text {font-size: 12px; transform: rotate(-90deg) translate(-10px);} ,.irs-grid-pol.large {height: 0px;}'),
      div(id = 'big_slider',
          
    sliderInput("fecha_SP_empleo", 
                label = "Rango de tiempo", 
                sep = "",
                dragRange = T,
                min = min(SP_empleo_raw()$fecha_num), 
                max = max(SP_empleo_raw()$fecha_num), 
                value = c(min(SP_empleo_raw()$fecha_num), 
                          max(SP_empleo_raw()$fecha_num))
    )))
    
  })
  
  SP_empleo <- reactive({
    
    req(input$fecha_SP_empleo)
    
    SP_empleo_raw() %>%
      filter(fecha_num >= input$fecha_SP_empleo[1] &
               fecha_num <= input$fecha_SP_empleo[2])
    
  })
  
  # Info: forma de CALCULO
  output$info_SP_empleo <- renderUI({ 
    helpText(HTML(paste("<b>Forma de cálculo:</b>", 
                        unique(SP_empleo()$`FORMA DE CALCULO`),
                        referencias)))
  })
  
  # Relevancia:
  output$rel_SP_empleo <- renderUI({ 
    helpText(HTML(paste("<b>Relvancia:</b>", unique(SP_empleo()$RELEVANCIA))))
  })
  
  # Title
  output$title_SP_empleo <- renderUI({ 
    helpText(HTML(unique(SP_empleo()$NOMINDICADOR)))
  })
  
  # Subtitle
  output$subtitle_SP_empleo <- renderUI({ 
    helpText(HTML(unique(SP_empleo()$DEFINICION)))
  })
  
  # Actualización
  output$actualizacion_SP_empleo <- renderUI({ 
    helpText(HTML(paste("<b>Última actualización:</b>", unique(SP_empleo()$ACTUALIZACION))))
  })
  
  output$chbox_SP_empleo <- renderUI({
    
    if(input$indicador_SP_empleo %in% lista_empleo) {
      
      req(input$indicador_SP_empleo)
      
      checkboxGroupInput(
        inputId = "chbox_filtro_empleo",
        label = "Seleccione categorias",
        inline = TRUE,
        choices = SP_empleo() %>% 
          distinct(filtro) %>%
          pull(),
        selected = SP_empleo() %>% 
          filter(JERARQUIA == 1) %>% 
          distinct(filtro) %>%
          pull()
      )
      
    } else {
      
      NULL
    }
    
  })   
  
  
output$p_SP_empleo <- renderPlot({
    
    req(input$fecha_SP_empleo, input$indicador_SP_empleo)
    
    if(input$indicador_SP_empleo %in% lista_empleo) {
      
      validate(need(nrow(SP_empleo()) > 0, 'No hay datos disponible para esta búsqueda'))
      
      plot_SP_empleo <- ggplot(data =  SP_empleo() %>% 
                                filter(filtro %in% input$chbox_filtro_empleo),
                              aes(x = fecha, y = VALOR, color = filtro)) +
        geom_line(size = 1, alpha = 0.5) +
        geom_point(size = 3) +
        theme(axis.text.x = element_text(angle = 0),
              legend.position = "bottom") +
        labs(x = "",
             y = "",
             title = input$indicador_SP_empleo,
             caption = wrapit(paste("Fuente: Unidad de Métodos y Acceso a Datos (FCS - UdelaR) en base a datos de",
                                    unique(SP_empleo()$FUENTE)))) +
        scale_y_continuous(labels = addUnits) +
        scale_color_viridis(name = " ", discrete = T, direction = 1)
      
      print(plot_SP_empleo)
      ggsave("www/indicador empleo.png", width = 30, height = 20, units = "cm")
      
      
    } else if(input$indicador_SP_empleo %notin% lista_empleo){ 
      
      req(input$fecha_SP_empleo, input$indicador_SP_empleo)
      
      plot_SP_empleo <- ggplot(data =  SP_empleo(), aes(x = fecha, y = VALOR)) +
        geom_line(size = 1, color = "#476481", alpha = 0.5) +
        geom_point(size = 3, color = "#476481") +
        theme(axis.text.x = element_text(angle = 0),
              legend.position = "none") +
        labs(x = "",
             y = "",
             title = input$indicador_SP_empleo,
             caption = wrapit(paste("Fuente: Unidad de Métodos y Acceso a Datos (FCS - UdelaR) en base a datos de",
                                    unique(SP_empleo()$FUENTE)))) +
        scale_y_continuous(labels = addUnits)
      
      print(plot_SP_empleo)
      ggsave("www/indicador empleo.png", width = 30, height = 20, units = "cm")
    }
    
  })
  
  
#Segundo gráfico
output$p_SP_empleo_2 <- renderPlot({
  
  req(input$fecha_SP_empleo, input$indicador_SP_empleo)
  
  if(input$indicador_SP_empleo %in% lista_empleo) {
    
    validate(need(nrow(SP_empleo()) > 0, 'No hay datos disponible para esta búsqueda'))
    
    plot_SP_empleo_2  <- ggplot(data = SP_empleo(),
                               aes(x = fecha, y = VALOR, fill = filtro)) +
      geom_col(color = "black", alpha = .8) +
      theme(axis.text.x = element_text(angle = 0),
            legend.position = "bottom") +
      labs(x = "",
           y = "",
           title = input$indicador_SP_empleo,
           caption = wrapit(paste("Fuente: Unidad de Métodos y Acceso a Datos (FCS - UdelaR) en base a datos de", 
                                  unique(SP_empleo()$FUENTE)))) +
      scale_y_continuous(labels = addUnits) +
      scale_fill_brewer(name = " ", palette = "Blues")
    
    print(plot_SP_empleo_2)
    ggsave("www/indicador empleo agregada.png", width = 30, height = 20, units = "cm")
    
  }
  
})


output$p_SP_empleo_2out <- renderUI({
  
  if(input$indicador_SP_empleo %in% lista_empleo) {
    
    plotOutput("p_SP_empleo_2")
    
  } else {
    
    NULL
  }
})

# Botón descarga gráfico
output$baja_p_SP_empleo_ag <- downloadHandler(
  filename <- function() {
    paste("indicador empleo agregada", "png", sep = ".")
  },
  
  content <- function(file) {
    file.copy("www/indicador empleo agregada.png", file)
  },
  contentType = "www/indicador empleo agregada"
)
  
  
  # Botón descarga gráfico
  output$baja_p_SP_empleo <- downloadHandler(
    filename <- function() {
      paste("indicador empleo", "png", sep = ".")
    },
    
    content <- function(file) {
      file.copy("www/indicador empleo.png", file)
    },
    contentType = "www/indicador empleo"
  )
  
  # Data para tabla y exportar 
  SP_empleo_1 <- reactive({
    
    SP_empleo() %>%
      mutate(fecha = format(fecha, format = "%Y")) %>% 
      select(fecha, VALOR_ORIGINAL) %>%
      arrange(desc(fecha))
    
  })
  
  SP_empleo_2 <- reactive({
    
    SP_empleo() %>%
      mutate(fecha = format(fecha, format = "%Y")) %>%
      rename(categoria = filtro) %>% 
      select(fecha, categoria, VALOR_ORIGINAL) %>%
      arrange(desc(fecha, fct_reorder(categoria, -VALOR_ORIGINAL))) %>% 
      pivot_wider(names_from = categoria,
                  values_from = VALOR_ORIGINAL)
    
  })
  
  
  # Data completa 
  SP_empleo_1_c <- reactive({
    d_SP_empleo %>%
      mutate(fecha = format(fecha, format = "%Y")) %>%
      filter(NOMINDICADOR == input$indicador_SP_empleo) %>% 
      select(fecha, VALOR_ORIGINAL) %>%
      arrange(desc(fecha))
  })
  
  SP_empleo_2_c <- reactive({
    d_SP_empleo %>%
      mutate(fecha = format(fecha, format = "%Y")) %>%
      filter(NOMINDICADOR == input$indicador_SP_empleo) %>% 
      rename(categoria = filtro) %>%
      select(fecha, categoria, VALOR_ORIGINAL) %>%
      arrange(fecha, fct_reorder(categoria, -VALOR_ORIGINAL))
  })
  
  
  # Metadata 
  SP_empleo_b <- reactive({
    SP_empleo() %>%
      select(NOMINDICADOR, FUENTE, DEFINICION, `FORMA DE CALCULO`, RELEVANCIA) %>% 
      mutate(`Unidad de Métodos y Acceso a Datos (FCS -UdelaR)` = " ") %>% 
      distinct() %>% 
      gather(key = "", value = " ")
    
  })
  
  list_df_SP_empleo1 <- reactive({
    list_df_SP_empleo1 <- list("Data" = SP_empleo_1(), 
                               "Metadata" = SP_empleo_b(),
                               "Data completa" = SP_empleo_1_c())
  })
  
  
  list_df_SP_empleo2 <- reactive({
    list_df_SP_empleo2 <- list("Data" = SP_empleo_2(),
                               "Metadata" = SP_empleo_b(),
                               "Data completa" = SP_empleo_2_c())
  })
  
  # Tablas
  output$tab_SP_empleo <- renderDT({
    
    if(input$indicador_SP_empleo %notin% lista_empleo) {
      
    DT::datatable(SP_empleo_1(),
              colnames = c("Fecha", "Valor"),
              rownames = FALSE,
              caption = htmltools::tags$caption(input$indicador_SP_empleo,
                                                style = "color:black; font-size:110%;")) %>% 
      formatCurrency(2, '', mark = ",")
      
    } else if(input$indicador_SP_empleo %in% lista_empleo){ 

      DT::datatable(SP_empleo_2(), 
                    rownames = FALSE,
                    # colnames = c("Fecha", "Categoría", "Valor"),
                    caption = htmltools::tags$caption(input$indicador_SP_empleo,
                                                      style = "color:black; font-size:110%;")) %>% 
        formatCurrency(2:4, '', mark = ",")
       
    }
    
  })
  
  # Descarga tabla
  output$dl_tabla_SP_empleo <- downloadHandler(
    
    filename = function() {
      paste("resultados-", input$indicador_SP_empleo, ".xlsx", sep = "")
    },
    content = function(file) {
      
      if(input$indicador_SP_empleo %notin% lista_empleo) {
        
      openxlsx::write.xlsx(list_df_SP_empleo1(), file)
        
      } else if(input$indicador_SP_empleo %in% lista_empleo){ 
       
        openxlsx::write.xlsx(list_df_SP_empleo2(), file)
        
      }
      
    }
  )
  
  
  ##  14.  GASTO (SP_gasto)   ==============================================
  
  # Data SP_deuda 
  SP_gasto_raw <- reactive({
    
    req(input$indicador_SP_gasto)

    d_SP_gasto %>%
      filter(NOMINDICADOR == input$indicador_SP_gasto)
    
  })
  
  
  output$selector_SP_gasto_fecha <- renderUI({
    
    tagList(
      tags$style(type = 'text/css', 
                 '#big_slider .irs-grid-text {font-size: 12px; transform: rotate(-90deg) translate(-10px);} ,.irs-grid-pol.large {height: 0px;}'),
      div(id = 'big_slider',
          
    sliderInput("fecha_SP_gasto", 
                label = "Rango de tiempo", 
                sep = "",
                dragRange = T,
                min = min(SP_gasto_raw()$fecha_num), 
                max = max(SP_gasto_raw()$fecha_num), 
                value = c(min(SP_gasto_raw()$fecha_num), 
                          max(SP_gasto_raw()$fecha_num))
    )))
    
  })
  
  SP_gasto <- reactive({
    
    req(input$fecha_SP_gasto)
    
    SP_gasto_raw() %>%
      filter(fecha_num >= input$fecha_SP_gasto[1] &
               fecha_num <= input$fecha_SP_gasto[2])
  })
  
  
  # Info: forma de CALCULO
  output$info_SP_gasto <- renderUI({ 
    helpText(HTML(paste("<b>Forma de cálculo:</b>", 
                        unique(SP_gasto()$`FORMA DE CALCULO`),
                        referencias)))
  })
  
  # Relevancia:
  output$rel_SP_gasto <- renderUI({ 
    helpText(HTML(paste("<b>Relvancia:</b>", unique(SP_gasto()$RELEVANCIA))))
  })
  
  # Title
  output$title_SP_gasto <- renderUI({ 
    helpText(HTML(unique(SP_gasto()$NOMINDICADOR)))
  })
  
  # Subtitle
  output$subtitle_SP_gasto <- renderUI({ 
    helpText(HTML(unique(SP_gasto()$DEFINICION)))
  })

  # Actualización
  output$actualizacion_SP_gasto <- renderUI({ 
    helpText(HTML(paste("<b>Última actualización:</b>", unique(SP_gasto()$ACTUALIZACION))))
  })
  
  output$chbox_SP_gasto <- renderUI({
    
    if(input$indicador_SP_gasto %in% lista_gasto) {
      
      req(input$indicador_SP_gasto)
      
      checkboxGroupInput(
        inputId = "chbox_filtro_gasto",
        label = "Seleccione categorias",
        inline = TRUE,
        choices = SP_gasto() %>% 
          distinct(filtro) %>%
          pull(),
        selected = SP_gasto() %>% 
          filter(JERARQUIA == 1) %>% 
          distinct(filtro) %>%
          pull()
      )
      
    } else {
      
      NULL
    }
    
  })    
  
  
  # Gráficos SP_gasto
  output$p_SP_gasto <- renderPlot({
    
    req(input$fecha_SP_gasto, input$indicador_SP_gasto)
    
    if(input$indicador_SP_gasto %in% lista_gasto) {
      
      validate(need(nrow(SP_gasto()) > 0, 'No hay datos disponible para esta búsqueda'))
      
      
      plot_SP_gasto <- ggplot(data =  SP_gasto() %>% 
                                filter(filtro %in% input$chbox_filtro_gasto),
                              aes(x = fecha, y = VALOR, color = filtro)) +
        geom_line(size = 1, alpha = 0.5) +
        geom_point(size = 3) +
        theme(axis.text.x = element_text(angle = 0),
              legend.position = "bottom") +
        labs(x = "",
             y = "",
             title = input$indicador_SP_gasto,
             caption = wrapit(paste("Fuente: Unidad de Métodos y Acceso a Datos (FCS - UdelaR) en base a datos de",
                                    unique(SP_gasto()$FUENTE)))) +
        scale_y_continuous(labels = addUnits) +
        scale_color_viridis(name = " ", discrete = T, direction = 1)
      
      print(plot_SP_gasto)
      ggsave("www/indicador gasto.png", width = 30, height = 20, units = "cm")
 
      
    } else if(input$indicador_SP_gasto %notin% lista_gasto){ 
      
      req(input$fecha_SP_gasto, input$indicador_SP_gasto)
      
      plot_SP_gasto <- ggplot(data =  SP_gasto(), aes(x = fecha, y = VALOR)) +
        geom_line(size = 1, color = "#476481", alpha = 0.5) +
        geom_point(size = 3, color = "#476481") +
        theme(axis.text.x = element_text(angle = 0),
              legend.position = "none") +
        labs(x = "",
             y = "",
             title = input$indicador_SP_gasto,
             caption = wrapit(paste("Fuente: Unidad de Métodos y Acceso a Datos (FCS - UdelaR) en base a datos de",
                                    unique(SP_gasto()$FUENTE)))) +
        scale_y_continuous(labels = addUnits)
      
      print(plot_SP_gasto)
      ggsave("www/indicador gasto.png", width = 30, height = 20, units = "cm")
    }
    
  })
  
  
  #Segundo gráfico
  output$p_SP_gasto_2 <- renderPlot({
    
    req(input$fecha_SP_gasto, input$indicador_SP_gasto)
    
    if(input$indicador_SP_gasto %in% lista_gasto) {
      
      validate(need(nrow(SP_gasto()) > 0, 'No hay datos disponible para esta búsqueda'))
      
      plot_SP_gasto  <- ggplot(data = SP_gasto() %>% 
                                 filter(fun_gasto != "Total",
                                        fun_gasto != "TOTAL"),
                               aes(x = fecha, y = VALOR, fill = fun_gasto)) +
        geom_col(color = "black", alpha = .8) +
        theme(axis.text.x = element_text(angle = 0),
              legend.position = "bottom") +
        labs(x = "",
             y = "",
             title = input$indicador_SP_gasto,
             caption = wrapit(paste("Fuente: Unidad de Métodos y Acceso a Datos (FCS - UdelaR) en base a datos de", 
                                    unique(SP_gasto()$FUENTE)))) +
        scale_y_continuous(labels = addUnits) +
        scale_fill_brewer(name = "Función del gasto", palette = "Blues")
      
      print(plot_SP_gasto)
      ggsave("www/indicador gasto agregada.png", width = 30, height = 20, units = "cm")
      
    }
    
  })
  
  
  
  output$p_SP_gasto_2out <- renderUI({
    
    if(input$indicador_SP_gasto %in% lista_gasto) {
      
      plotOutput("p_SP_gasto_2")
      
    } else {
      
      NULL
    }
  })
  
  # Botón descarga gráfico
  output$baja_p_SP_gasto <- downloadHandler(
    filename <- function() {
      paste("indicador gasto", "png", sep = ".")
    },
    
    content <- function(file) {
      file.copy("www/indicador gasto.png", file)
    },
    contentType = "www/indicador gasto"
  )
  
  
  # Botón descarga gráfico
  output$baja_p_SP_gasto_2 <- downloadHandler(
    filename <- function() {
      paste("indicador gasto agregada", "png", sep = ".")
    },
    
    content <- function(file) {
      file.copy("www/indicador gasto agregada.png", file)
    },
    contentType = "www/indicador gasto agregada"
  )
  
  
  # Data para tabla y exportar 
  SP_gasto_1 <- reactive({
    
    SP_gasto() %>%
      mutate(fecha = format(fecha, format = "%Y")) %>%
      select(fecha, VALOR_ORIGINAL) %>%
      arrange(desc(fecha, VALOR_ORIGINAL))
    
  })
  
  SP_gasto_2 <- reactive({
    
    SP_gasto() %>%
      mutate(fecha = format(fecha, format = "%Y")) %>%
      select(fecha, fun_gasto, VALOR_ORIGINAL) %>%
      arrange(desc(fecha, fct_reorder(fun_gasto, -VALOR_ORIGINAL))) %>% 
      pivot_wider(names_from = fun_gasto,
                  values_from = VALOR_ORIGINAL)
    
  })
  
  # Data completa
  SP_gasto_1_c <- reactive({
    d_SP_gasto %>%
      mutate(fecha = format(fecha, format = "%Y")) %>%
      filter(NOMINDICADOR == input$indicador_SP_gasto) %>% 
      select(fecha, VALOR_ORIGINAL) %>%
      arrange(desc(fecha))
  })
  
  
  SP_gasto_2_c <- reactive({
    d_SP_gasto %>%
      mutate(fecha = format(fecha, format = "%Y")) %>%
      filter(NOMINDICADOR == input$indicador_SP_gasto) %>% 
      select(fecha, fun_gasto, VALOR_ORIGINAL) %>%
      arrange(fecha, fct_reorder(fun_gasto, -VALOR_ORIGINAL)) %>% 
      pivot_wider(names_from = fun_gasto,
                  values_from = VALOR_ORIGINAL)
  })
  
  # Metadata 
  SP_gasto_b <- reactive({
    SP_gasto() %>%
      select(NOMINDICADOR, FUENTE, DEFINICION, `FORMA DE CALCULO`, RELEVANCIA) %>% 
      mutate(`Unidad de Métodos y Acceso a Datos (FCS -UdelaR)` = " ") %>% 
      distinct() %>% 
      gather(key = "", value = " ")
    
  })
  
  list_df_SP_gasto1 <- reactive({
    list_df_SP_gasto1 <- list("Data" = SP_gasto_1(), 
                              "Metadata" = SP_gasto_b(),
                              "Data completa" = SP_gasto_1_c())
  })

    list_df_SP_gasto2 <- reactive({
    list_df_SP_gasto2 <- list("Data" = SP_gasto_2(), 
                              "Metadata" = SP_gasto_b(),
                              "Data completa" = SP_gasto_2_c())
  })
  
  # Tablas en shiny
  output$tab_SP_gasto <- renderDT({
    
    if(input$indicador_SP_gasto %notin% lista_gasto) {
      
      DT::datatable(SP_gasto_1(), 
                rownames = FALSE,
                colnames = c("Fecha", "Valor"),
                caption = htmltools::tags$caption(input$indicador_SP_gasto,
                                                  style = "color:black; font-size:110%;")) %>% 
        formatCurrency(2, '', mark = ",")
      
    } else if(input$indicador_SP_gasto %in% lista_gasto){ 
      
      DT::datatable(SP_gasto_2(), 
                rownames = FALSE,
                # colnames = c("Fecha", "Función del gasto", "Valor"),
                caption = htmltools::tags$caption(input$indicador_SP_gasto,
                                                  style = "color:black; font-size:110%;")) %>% 
        formatCurrency(3, '', mark = ",")
    }
    
  })
  
  
  # Descarga tabla
  output$dl_tabla_SP_gasto <- downloadHandler(
    
    filename = function() {
      paste("resultados-", input$indicador_SP_gasto, ".xlsx", sep = "")
    },
    content = function(file) {
      
      if(input$indicador_SP_gasto %notin% lista_gasto) {
        
        openxlsx::write.xlsx(list_df_SP_gasto1(), file)
        
      } else if(input$indicador_SP_gasto %in% lista_gasto){ 
        
        openxlsx::write.xlsx(list_df_SP_gasto2(), file) 
        
      }
    }
  )
  
  
  ##  15.  EDUCACIÓN (SP_edu)   ============================================
  
  # Data SP_edu 
  SP_edu_raw <- reactive({
    
    req(input$indicador_SP_edu)
    
    d_SP_edu %>%
      filter(NOMINDICADOR == input$indicador_SP_edu)
    
  })
  
  output$selector_SP_edu_fecha <- renderUI({
    
    tagList(
      tags$style(type = 'text/css', 
                 '#big_slider .irs-grid-text {font-size: 12px; transform: rotate(-90deg) translate(-10px);} ,.irs-grid-pol.large {height: 0px;}'),
      div(id = 'big_slider',
          
    sliderInput("fecha_SP_edu", 
                label = "Rango de tiempo", 
                sep = "",
                dragRange = T,
                min = min(SP_edu_raw()$fecha_num), 
                max = max(SP_edu_raw()$fecha_num), 
                value = c(min(SP_edu_raw()$fecha_num), 
                          max(SP_edu_raw()$fecha_num))
    )))
    
  })
  
  SP_edu <- reactive({
    
    req(input$fecha_SP_edu)
    
    SP_edu_raw() %>%
      filter(fecha_num >= input$fecha_SP_edu[1] &
               fecha_num <= input$fecha_SP_edu[2])
    
  })
  
  # Info: forma de CALCULO
  output$info_SP_edu <- renderUI({ 
    helpText(HTML(paste("<b>Forma de cálculo:</b>", 
                        unique(SP_edu()$`FORMA DE CALCULO`),
                        referencias)))
  })
  
  # Relevancia:
  output$rel_SP_edu <- renderUI({ 
    helpText(HTML(paste("<b>Relvancia:</b>", unique(SP_edu()$RELEVANCIA))))
  })
  
  # Title
  output$title_SP_edu <- renderUI({ 
    helpText(HTML(unique(SP_edu()$NOMINDICADOR)))
  })
  
  # Subtitle
  output$subtitle_SP_edu <- renderUI({ 
    helpText(HTML(unique(SP_edu()$DEFINICION)))
  })
  
  # Actualización
  output$actualizacion_SP_edu <- renderUI({ 
    helpText(HTML(paste("<b>Última actualización:</b>", unique(SP_edu()$ACTUALIZACION))))
  })
  
  output$chbox_SP_edu <- renderUI({
    
    if(input$indicador_SP_edu %in% lista_edu) {
      
      req(input$indicador_SP_edu)
      
      checkboxGroupInput(
        inputId = "chbox_filtro_edu",
        label = "Seleccione categorias",
        inline = TRUE,
        choices = SP_edu() %>% 
          distinct(filtro) %>%
          pull(),
        selected = SP_edu() %>% 
          filter(JERARQUIA == 1) %>% 
          distinct(filtro) %>%
          pull()
      )
      
    } else {
      
      NULL
    }
    
  })    
  
  
  # Gráficos SP_edu
  output$p_SP_edu <- renderPlot({
    
    req(input$fecha_SP_edu, input$indicador_SP_edu)
    
    if(input$indicador_SP_edu %in% lista_edu) {
      
      validate(need(nrow(SP_edu()) > 0, 'No hay datos disponible para esta búsqueda'))
      
      plot_SP_edu <- ggplot(data =  SP_edu() %>% 
                                filter(filtro %in% input$chbox_filtro_edu),
                              aes(x = fecha, y = VALOR, color = filtro)) +
        geom_line(size = 1, alpha = 0.5) +
        geom_point(size = 3) +
        theme(axis.text.x = element_text(angle = 0),
              legend.position = "bottom") +
        labs(x = "",
             y = "",
             title = input$indicador_SP_edu,
             caption = wrapit(paste("Fuente: Unidad de Métodos y Acceso a Datos (FCS - UdelaR) en base a datos de",
                                    unique(SP_edu()$FUENTE)))) +
        scale_y_continuous(labels = addUnits) +
        scale_color_viridis(name = " ", discrete = T, direction = 1)
      
      print(plot_SP_edu)
      ggsave("www/indicador educacion.png", width = 30, height = 20, units = "cm")
      
      
    } else if(input$indicador_SP_edu %notin% lista_edu){ 
      
      req(input$fecha_SP_edu, input$indicador_SP_edu)
      
      plot_SP_edu <- ggplot(data =  SP_edu(), aes(x = fecha, y = VALOR)) +
        geom_line(size = 1, color = "#476481", alpha = 0.5) +
        geom_point(size = 3, color = "#476481") +
        theme(axis.text.x = element_text(angle = 0),
              legend.position = "none") +
        labs(x = "",
             y = "",
             title = input$indicador_SP_edu,
             caption = wrapit(paste("Fuente: Unidad de Métodos y Acceso a Datos (FCS - UdelaR) en base a datos de",
                                    unique(SP_edu()$FUENTE)))) +
        scale_y_continuous(labels = addUnits)
      
      print(plot_SP_edu)
      ggsave("www/indicador educacion.png", width = 30, height = 20, units = "cm")
    }
    
  })
  
  
  #Segundo gráfico
  output$p_SP_edu_2 <- renderPlot({
    
    req(input$fecha_SP_edu, input$indicador_SP_edu)
    
    if(input$indicador_SP_edu %in% lista_edu) {
      
      validate(need(nrow(SP_edu()) > 0, 'No hay datos disponible para esta búsqueda'))
      
      plot_SP_edu  <- ggplot(data = SP_edu() %>% 
                                 filter(filtro != "Total",
                                        filtro != "TOTAL"),
                               aes(x = fecha, y = VALOR, fill = filtro)) +
        geom_col(color = "black", alpha = .8) +
        theme(axis.text.x = element_text(angle = 0),
              legend.position = "bottom") +
        labs(x = "",
             y = "",
             title = input$indicador_SP_edu,
             caption = wrapit(paste("Fuente: Unidad de Métodos y Acceso a Datos (FCS - UdelaR) en base a datos de", 
                                    unique(SP_edu()$FUENTE)))) +
        scale_y_continuous(labels = addUnits) +
        scale_fill_brewer(name = "Nivel educativo", palette = "Blues")
      
      print(plot_SP_edu)
      ggsave("www/indicador edu agregada.png", width = 30, height = 20, units = "cm")
      
    }
    
  })
  

  output$p_SP_edu_2out <- renderUI({
    
    if(input$indicador_SP_edu %in% lista_edu) {
      
      plotOutput("p_SP_edu_2")
      
    } else {
      
      NULL
    }
  })
  
  
  # Botón descarga gráfico
  output$baja_p_SP_edu <- downloadHandler(
    filename <- function() {
      paste("indicador educacion", "png", sep = ".")
    },
    
    content <- function(file) {
      file.copy("www/indicador educacion.png", file)
    },
    contentType = "www/indicador educacion"
  )
  
  
  # Botón descarga gráfico
  output$baja_p_SP_edu_2 <- downloadHandler(
    filename <- function() {
      paste("indicador edu  agregada", "png", sep = ".")
    },
    
    content <- function(file) {
      file.copy("www/indicador edu agregada.png", file)
    },
    contentType = "www/indicador edu agregada"
  )
  
  # Data para tabla y exportar 
  SP_edu_1 <- reactive({
    
    SP_edu() %>%
      mutate(fecha = format(fecha, format = "%Y")) %>%
      select(fecha, VALOR_ORIGINAL) %>%
      arrange(desc(fecha, VALOR_ORIGINAL))
    
  })
  
  SP_edu_2 <- reactive({
    
    SP_edu() %>%
      mutate(fecha = format(fecha, format = "%Y")) %>%
      select(fecha, nivel_edu, VALOR_ORIGINAL) %>%
      arrange(desc(fecha, fct_reorder(nivel_edu, -VALOR_ORIGINAL))) %>% 
      pivot_wider(names_from = nivel_edu,
                  values_from = VALOR_ORIGINAL)
    
  })
  
  # Data completa
  SP_edu_1_c <- reactive({
    d_SP_edu %>%
      mutate(fecha = format(fecha, format = "%Y")) %>%
      filter(NOMINDICADOR == input$indicador_SP_edu) %>% 
      select(fecha, VALOR_ORIGINAL) %>%
      arrange(desc(fecha, VALOR_ORIGINAL))
  })
  
  
  SP_edu_2_c <- reactive({
    d_SP_edu %>%
      mutate(fecha = format(fecha, format = "%Y")) %>%
      filter(NOMINDICADOR == input$indicador_SP_edu) %>% 
      select(fecha, nivel_edu, VALOR_ORIGINAL) %>%
      arrange(fecha, fct_reorder(nivel_edu, -VALOR_ORIGINAL)) %>% 
      pivot_wider(names_from = nivel_edu,
                  values_from = VALOR_ORIGINAL) 
  })
  
  # Metadata 
  SP_edu_b <- reactive({
    SP_edu() %>%
      select(NOMINDICADOR, FUENTE, DEFINICION, `FORMA DE CALCULO`, RELEVANCIA) %>% 
      mutate(`Unidad de Métodos y Acceso a Datos (FCS -UdelaR)` = " ") %>% 
      distinct() %>% 
      gather(key = "", value = " ")
    
  })
  
  list_df_SP_edu2 <- reactive({
    list_df_SP_edu2 <- list("Data" = SP_edu_2(),
                            "Metadata" = SP_edu_b(),
                            "Data completa" = SP_edu_2_c())
  })
  
  list_df_SP_edu1 <- reactive({
    list_df_SP_edu1 <- list("Data" = SP_edu_1(),
                            "Metadata" = SP_edu_b(),
                            "Data completa" = SP_edu_1_c())
  })
  
  # Tablas en shiny
  output$tab_SP_edu <- renderDT({
    
    if(input$indicador_SP_edu %notin% lista_edu) {
      
      DT::datatable(SP_edu_1(), 
                rownames = FALSE,
                colnames = c("Fecha", "Valor"),
                caption = htmltools::tags$caption(input$indicador_SP_edu,
                                                  style = "color:black; font-size:110%;")) %>% 
        formatCurrency(2, '', mark = ",")
      
      
    } else if(input$indicador_SP_edu %in% lista_edu){ 
      
      DT::datatable(SP_edu_2(), 
                rownames = FALSE,
                # colnames = c("Fecha", "Nivel educativo", "Valor"),
                caption = htmltools::tags$caption(input$indicador_SP_edu,
                                                  style = "color:black; font-size:110%;")) %>% 
        formatCurrency(2:4, '', mark = ",")
    }
    
  })
  
  
  # Descarga tabla
  output$dl_tabla_SP_edu <- downloadHandler(
    
    filename = function() {
      paste("resultados-", input$indicador_SP_edu, ".xlsx", sep = "")
    },
    content = function(file) {
      
      if(input$indicador_SP_edu %notin% lista_edu) {
        
        openxlsx::write.xlsx(list_df_SP_edu1(), file)
        
      } else if(input$indicador_SP_edu %in% lista_edu){ 
        
        openxlsx::write.xlsx(list_df_SP_edu2(), file) 
        
      }
    }
  )
  
  
  
}  

shinyApp(ui = ui, server = server)

